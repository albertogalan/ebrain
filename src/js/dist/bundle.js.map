{"version":3,"sources":["../../../../../home/agalan/.npm-global/lib/node_modules/browserify/node_modules/browser-pack/_prelude.js","main.js","node_modules/money/money.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7hfile":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","//\n// function saveintobrowser(filename,html){\n//\n// // filename=$( \"#tittle\" ).val()\n// // html=evt.editor.getData()\n// // lack of sync into the server\n//   var db = new Dexie(\"m13\");\n//   db.version(1).stores({\n//     files: \"filename,html\"\n//   });\n//\n//   db.open().catch(function (e) {\n//      alert (\"Open failed: \" + e);});\n//\n//\n//   db.transaction(\"rw\", db.files, function () {\n//       // Update the register if exists if not add\n//      db.files.where(\"filename\").equals(filename).modify({html: html}).then(function(updated)\n//      {\n//        if (updated)\n//            console.log (\"pedro found and update\");\n//        else\n//        {\n//        console.log (\"pedro not found \");\n//        db.files.add({filename: $( \"#tittle\" ).val(), html:  evt.editor.getData()});} });   });\n//\n// };\n\n\nvar ctrlI = false;\nvar fx = require('money');\n// require('ckeditor');\n// CKEDITOR.replace( 'editor' );\n\n\n// Add an event listener\ndocument.addEventListener(\"name-of-event\", function(e) {\n    // console.log(e.detail); // Prints \"Example of an event\"\n});\n\n\n// $(\".videolink\").click(function(){\n\n//     var src = $(this).attr(\"value\");\n//    // alert(src);\n// // console.log(evt);\n// // console.log($(this));\n// // console.log(\"clicked videolink in ckeditor\");\n// loadVideo(src);\n\n\n// })\n\n// function loadVideo2(){\n\n//     console.log('clicked loadVideo2');\n// }\n\n\n$(document).ready(function() {\n\n    // var b1 = document.getElementById(\"MW\");\n    // b1.tabIndex = 5; //change the default tabindex\n\n\n\n    var url = getParameterByName('url');\n    if (url) {\n\n        // console.log(url);\n\n        $(\"#tittle\").val(url);\n        $(\"#rename\").val(url);\n        //  read();\n        //$(\".first_editor\").focus();\n        // $(\"#tittle\").focus().select();\n    } else {\n        $(\"#tittle\").focus().select();\n    }\n\n\n    // loadautosearch(\"/resources/files2.json\");\n\n\n    // $( \".first_editor h3\" ).click(function() {\n    //   alert('clicked');\n    //   $(this).nextUntil( \".first_editor h3, .first_editor h2\" ).toggle();\n    // });\n    // $( \".first_editor h4\" ).click(function() {\n    //   $(this).nextUntil( \".first_editor h4, .first_editor h3 \" ).toggle();\n    // });\n    //\n    // $( \"h2\" ).click(function() {\n    //   $(this).next( \"h2, h1\" ).toggle();\n    // });\n    //\n    // $( \"h1\" ).click(function() {\n    //   $(this).next( \"h1\" ).toggle();\n    // });\n\n\nwindow.addEventListener(\"keydown\", function (event) {\n  if (event.defaultPrevented) {\n    return; // Do nothing if the event was already processed\n  }\n\n  switch (event.key) {\n    case \"ArrowDown\":\n      // Do something for \"down arrow\" key press.\n      break;\n    case \"ArrowUp\":\n      // Do something for \"up arrow\" key press.\n      break;\n    case \"ArrowLeft\":\n      // Do something for \"left arrow\" key press.\n      break;\n    case \"ArrowRight\":\n      // Do something for \"right arrow\" key press.\n      break;\n    case \"Enter\":\n      // Do something for \"enter\" or \"return\" key press.\n      break;\n    case \"Escape\":\n      // Do something for \"esc\" key press.\n      console.log('press escape')\n             translate_select();\n      break;\n    default:\n      return; // Quit when this doesn't handle the key event.\n  }\n\n  // Cancel the default action to avoid it being handled twice\n  event.preventDefault();\n}, true);\n\n\nfunction translate_select(){\n\n\n        text = window.getSelection().toString()\n                console.log(text)\n        lang = 'zh'\n        langto = 'en'\n        fanyi(text, lang, langto).then(function(aa) {\n            console.log(aa.src)\n            aa.dst = aa.pinyin + \"<br>\" + aa.translate + aa.handi\n            var trad = '<div class=\"audiofanyi\">' + aa.audio + '</div>' +aa.src + ': </br> ' + aa.dst ;\n            $('#fanyi55').html(trad)\n        });\n\n}\n\n    $(\".jieba\").dblclick(function() {\n  \n\ntranslate_select()\n\n\n    })\n\n\n\n    $(\"button#puttogether\").click(function() {\n        sel = editor.extractSelectedHtml()\n        aa = sel.getHtml().replace(/<br>/gm, '')\n        editor.insertHtml(aa);\n    })\n\n    $(\"button#autotrans\").click(function() {\n        $(\"span[lang='zh-cn']\").css('color', 'red')\n        let lang = 'zh'\n        let langto = 'en'\n        let bb = $(\"span[lang='zh-cn']:eq(1)\").text()\n        console.log(`to translate: ${bb}`)\n        fanyi(bb, 'zh', 'en').then(function(aa) {\n            let translation = \"<span class='original' lang='\" + lang + \"' data-pseudo-content='\" + aa.src + \"' >&nbsp;</span><span class='translate'  lang='\" + langto + \"' >\" + aa.translate + \"</span>\"\n            console.log(aa.i)\n            $(\"span[lang='zh-cn']:eq(1)\").html(translation)\n            $(\"span[lang='zh-cn']:eq(1)\").attr('lang', '')\n        })\n\n    })\n\n\n\n    $(\"button#position\").click(function() {\n        console.log('clicked save position')\n        $(\"#scrollArea\").scrollTop()\n\n\n    });\n\n    $(\"button#trans\").click(function() {\n        console.log('clicked translate')\n        $(\".translate\").show();\n        $(\".original\").hide();\n\n\n    });\n\n    $(\"button#showtranslate\").click(function() {\n        console.log('clicked showtranslate')\n        $(\".translate\").show();\n        $(\".original\").show();\n\n    });\n\n\n    $(\"button#addabsolutepath\").click(function() {\n\n        console.log('clicked addabsolutepath2')\n\n\n        $('img').each(function(i, v) {\n            if ($(this).attr('src').includes(\"http\")) {\n                console.log('not change')\n\n            } else {\n                var aaa = 'http://i487.lxc/' + $(this).attr('src');\n                $(this).attr('src', aaa);\n                console.log($(this).attr('src'))\n            }\n        });\n\n    });\n\n    $(\"button#sharelink\").click(function() {\n\n\n        console.log('clicked sharelink ')\n        console.log(\"http://i487.lxc/ebrain?url=\" + $('#tittle').val())\n\n        $.getJSON('ebrain?url=' + $('#tittle').val(),\n            function(data) {\n\n                $('#sharelink').attr('href', 'http://i487.lxc/view.php?url=' + data.hash)\n\n            })\n\n\n    });\n\n    $(\"button#updatecost\").click(function() {\n        console.log('clicked updatedcost ')\n\n        $.getJSON(\n            // NB: using Open Exchange Rates here, but you can use any source!\n            'https://openexchangerates.org/api/latest.json?app_id=960f0b8dca9344328b13ef816957d810',\n            function(data) {\n                // Check money.js has finished loading:\n                if (typeof fx !== \"undefined\" && fx.rates) {\n                    fx.rates = data.rates;\n                    fx.base = data.base;\n\n\n                    console.log('updating cost...')\n\n                    $('.cost').each(function(i, v) {\n                        aa = $(this).attr('data-cost')\n                        total = Math.round(fx(aa).from(\"CNY\").to(\"EUR\") / 0.0095) / 100;\n                        console.log(\"converting CNY into EUR\" + fx(1).from(\"CNY\").to(\"EUR\"));\n                        $(this).text(total)\n                    });\n\n                } else {\n                    // If not, apply  to fxSetup global:\n                    var fxSetup = {\n                        rates: data.rates,\n                        base: data.base\n                    }\n\n                }\n                var d = new Date();\n                var datetime = d.getFullYear() + '-' + d.getMonth() + '-' + d.getDate();\n                editor.insertHtml(\"<span class='information'> date: \" + datetime + \" CNY to EUR Convert rate is  \" + fx(1).from(\"CNY\").to(\"EUR\") + \"</span>\")\n            }\n        );\n\n\n\n\n\n\n    });\n    // https://openexchangerates.github.io/money.js/#download\n\n\n    $(\"#tittle\").focusout(function() {\n        // console.log('1');\n\n        console.log($(\"#tittle\").val());\n        $(\"#rename\").val($(\"#tittle\").val());\n        $('.first_editor').attr('id', $(\"#tittle\").val());\n        $('.first_editor').attr(\"contenteditable\", \"true\");\n        $('.first_editor').focus();\n        read();\n        // editor.setData($( \"#hidden\" ).html());  // load data in the editor\n\n        // hljs.initHighlightingOnLoad();\n\n    });\n\n\n\n\n    $(\"#rename\").focusout(function() {\n        // console.log('2');\n\n        if ($(\"#tittle\").val() == $(\"#rename\").val())\n\n            // editor.setData($( \"#hidden\" ).html());  // load data in the editor\n            read();\n        else {\n            rename();\n        }\n\n\n    });\n\n\n\n\n\n    CKEDITOR.instances['introduction'].destroy();\n    var editor = CKEDITOR.inline(\"introduction\");\n\n\n\n\n    document.addEventListener('paste', function(e) {\n        //    var html = e.clipboardData.getData (\"Text\");\n        // e.preventDefault();\n        //      if ( ctrlI ){\n        //        // CKEDITOR.instances['introduction'].destroy();\n        //        //\n        //        //    var editor = CKEDITOR.inline(\"introduction\");\n        //\n        //        console.log (\"paste event\");\n        //        // editor.insertHtml(html);\n        //      }\n        //    // var html = e.clipboardData.getData('text/html');\n        //    console.log(html);\n        //    // Whatever you want to do with the html\n    });\n\n\n    editor.on('paste', function(evt) {\n        evt.stop();\n        var data = evt.data.dataValue;\n\n        if (window.chrome || window.safari) {\n            // removing span wrapper on webkit browsers.\n            data = $(data).html();\n        }\n        evt.editor.insertHtml(data);\n    });\n\n\n\n    editor.on('key', function(evt) {\n        // console.log('3');\n        //http://stackoverflow.com/questions/4401469/how-to-select-a-text-range-in-ckeditor-programatically\n\n        var charCode = evt.data.keyCode; // at the moment this is wrong, keyCode needs to be properly converted to charCode\n        // var clipboardData = evt.data.dataValue;\n        console.log(charCode);\n        var tag = \"h1\";\n        //  console.log(selectedText);\n        switch (charCode) {\n            case 1114161: // Ctrl 1\n                tag = \"<h1></h1>\";\n                break;\n            case 1114162: // Ctrl 2\n                tag = \"<h2></h2>\";\n                break;\n            case 1114163: // Ctrl 3\n                tag = \"<h3></h3>\";\n                break;\n            case 1114164: // Ctrl 4\n                tag = \"<h4></h4>\";\n                break;\n            case 1114166: // Ctrl 6\n                tag = \"<h5></h5>\";\n                break;\n            case 1114169: // Ctrl 6\n                editor.insertHtml(\"<div class='savetofile'>put text</div>\");\n                break;\n\n            case 1114300: // Ctrl ,\n                console.log('convert Coin');\n\n                sel = editor.getSelection().getSelectedText()\n                console.log(sel)\n\n                editor.insertHtml(convertCoin(sel, \"yuan\", \"euro\"))\n                $('p:has(span.cost)').addClass('middle');\n\n                break;\n\n\n            case 1114304: // Ctrl `\n                console.log('request fanyi');\n                let lang = $(\"#lang\").val(),\n                    langto = $(\"#langto\").val()\n\n\n\n                sel = editor.getSelection().getSelectedText().replace(/(\\r\\n\\t|\\n|\\r\\t)/gm, \"\");\n                if (sel.length > 0) {\n                    fanyi(sel, lang, langto).then(function(aa) {\n                        let translation = \"<span class='original' lang='\" + lang + \"' data-pseudo-content='\" + aa.src + \"' >&nbsp;</span><span class='translate'  lang='\" + langto + \"' >\" + aa.translate + \"</span>\"\n                        editor.insertHtml(translation);\n                    })\n                }\n\n\n\n                break;\n\n\n\n\n            case 5570638: // Ctrl Alt N\n                // tag=\"<b></b>\";\n                tag = \"<em></em>\"; //emphasis\n                break;\n\n            case 5570637: // Ctrl Alt M\n                tag = \"<mark></mark>\";\n                break;\n            case 5570628: // Ctrl Alt D\n                var d = new Date();\n                var datetime = d.getFullYear() + '-' + d.getMonth() + '-' + d.getDate();\n                tag = \"<del datetime=\" + datetime + \" title=\" + datetime + \"></div>\"; //del text\n                break;\n            case 5570633: // Ctrl Alt I\n                tag = \"<em></em>\"; //emphasis\n                break;\n            case 2228314: // Shift Z   Test\n                $(\"#cke_3_top\").toggle();\n                break;\n            case 3342408: // CTRL Shift H  Hide/show tool bar\n                // evt.data.stopPropagation();\n                // evt.data.preventDefault();\n                $(\"#cke_3_top\").toggle();\n                break;\n            case 1114195: //Ctrl S save a version\n                version();\n                if ($('.savetofile').length > 0)\n                    save(evt, \"savetofile\");\n\n                break;\n\n            case 3342404: // Ctrl Shift D  Insert detail/Summary html\n                var sel = editor.getSelection().getSelectedText();\n                if (sel.length > 0) {\n                    var details = new CKEDITOR.dom.element('details');\n                    details.setHtml(' <summary>' + sel + '</summary><p>More info about the details.</p>');\n                    editor.insertElement(details);\n                }\n                break;\n            case 1114191: // Ctrl O  Open codeSnippet dialog\n                editor.execCommand('codeSnippet'); //widget\n                break;\n\n            case 1114185: // Ctrl I  Inserthtml\n                // var sel = editor.getSelection().getSelectedText();\n                ctrlI = !ctrlI;\n\n                // evt.data.dataValue = evt.data.dataValue\n                // editor.fire( 'paste',editor);\n                // console.log(e.clipboardData.getData('text/html'));\n\n                // This code obviously will not preserve the case of the first and last letters.\n                // Let it be an exercise for the reader ;).\n                // editor.execCommand( 'inserthtml4x');  //widget\n\n                break;\n\n            case 1114182: // Ctrl F open dialog Find and replace\n                editor.execCommand('find');\n                break;\n\n            case 3342402: // Ctrl Shift B\n                editor.insertHtml(\"<br/>\");\n                break;\n                // case 7798868:// Ctrl ALT SHIT T\n                //   editor.insertHtml( \"<table class=table1Class' > <tbody> \\\n                //      <tr><td>1</td><td>2</td></tr><tr><td>1</td><td>2</td></tr> \\\n                //      </tbody></table>\");\n                //   //  editor.insertHtml( clipboardData);\n                //     // console.log(clipboardData);\n                //    break;\n            case 3342422: // Ctrol shift V\n                texto = 'Crtl + SHIFT V'; // Ctrl 1\n                // text = window.clipboardData.getData(\"Text\");\n                // console.log(texto);\n                // editor.insertHtml( clipboardData);\n                // console.log(texto);\n                break;\n            default:\n                texto = 'Other key';\n        }\n\n\n        var keypress = [1114161, 1114162, 1114163, 1114164, 1114166, 1114169, 5570637, 5570628, 5570633, 5570638];\n        // console.log(keypress.indexOf(charCode));\n        if (keypress.indexOf(charCode) > -1) { // retag the select area\n            var sel = editor.getSelection().getSelectedText();\n            if (sel.length > 0) {\n                //  var newElement = new CKEDITOR.dom.element(tag);\n                var newElement = CKEDITOR.dom.element.createFromHtml(tag)\n                // newElement.setAttributes({style: ''});\n                newElement.setText(sel);\n                editor.insertElement(newElement);\n            } else {\n                var newElement = new CKEDITOR.dom.element(tag);\n                // newElement.setAttributes({style: ''});\n                newElement.setText(sel);\n                //  editor.insertElement(newElement).selectElement();\n                //  editor.getSelection().selectElement(newElement);\n\n            }\n        }\n\n\n    });\n\n\n\n\n\n    // override shortcut firefox keyboard\n    $('.first_editor').keypress(function(event) {\n\n        // console.log('4');\n\n\n        // console.log('evento es: '+ event.key +'shift: '+event.ctrlKey + 'crtl: '+ event.ctrlKey);\n        var a = event.key;\n        var b = event.ctrlKey;\n        var c = event.shiftKey;\n        var d = event.altKey;\n        var response = event.key + event.ctrlKey + event.shiftKey + event.altKey;\n        //  console.log(response);\n        // console.log(b);\n        switch (true) {\n\n\n            case (a == 'F' && b && c && d):\n                var sel = editor.getSelection().getSelectedText();\n                sel = sel.replace(/\\s+/g, '+');; //replace any space with +\n                openInNewTab('https://en.wikipedia.org/w/index.php?search=' + sel);\n                // console.log(sel);\n                break;\n\n            case (a == 'F' && b && c):\n                var sel = editor.getSelection().getSelectedText();\n                sel = sel.replace(/\\s+/g, '+');; //replace any space with +\n                openInNewTab('https://www.google.com/search?q=' + sel);\n                // console.log(sel);\n                break;\n\n\n            case (a == 'H' && b && c):\n            case (a == 's' && b):\n                event.preventDefault(); //avoid other shortcut keys\n                break;\n\n                // case (a == 'L' && b  && c) : // Ctrl Shift L\n                //      event.preventDefault(); //avoid other shortcut keys\n                //     text = editor.getClipboardData(\"Text\");\n                //\n                //      console.log(text);\n                //\n                // break;\n\n\n\n\n            case (a == 'i' && b && d): //Ctrl Alt i\n                editor.execCommand('mathjax'); //widget\n                break;\n\n            case (a == 'i' && b):\n                // console.log('press ctrl I');\n                event.preventDefault(); //avoid other shortcut keys\n\n                editor.execCommand('inserthtml4x'); //widget\n                break;\n\n\n\n        }\n\n\n        // if (event.key === 'H' && event.ctrlKey && event.shiftKey  )\n        //     event.preventDefault();\n        // if (event.key === 's' && event.ctrlKey  )\n        //     event.preventDefault();\n    });\n\n\n    editor.on('paste', function(evt) {\n\n        //\n        // if ( ctrlI == 1){\n        //\n        //   // var html = editor.getClipboardData(\"Text\");\n        //   // console.log (\"paste event\" + html);\n        //   // editor.insertHtml(html);\n        //   ctrlI=0;\n        //   editor.getClipboardData( { title: 'Get my data' }, function( data ) {\n        //       if ( data )\n        //           console.log( 'data is: ' + data.dataValue );\n        //   } );\n        //\n        // }\n        //\n\n\n\n\n        // highlightjsworkers();\n    });\n\n\n    editor.on('focus', function(evt) {\n        // highlightjsworkers();\n    });\n\n    editor.on('click', function(evt) {\n\n        console.log('click');\n\n    });\n\n    editor.on('doubleclick', function(evt) {\n        var element = evt.data.element;\n        //console.log('doubleclick');\n        classe = element.getAttribute(\"class\");\n        console.log('doubleclick in class ' + classe)\n        if (classe == 'jieba'){\n\n           translate_select();\n\n\n\n        }\n        if (classe == 'videolink') {\n            loadVideo(element);\n        }\n        classe = element.getAttribute(\"class\");\n        if (classe == 'videolink') {\n            loadVideo(element);\n        }\n        var tag = element.getName();\n        // console.log(tag);\n        if (tag == 'a') {\n            url = element.getAttribute(\"href\");\n            openInNewTab(url);\n            // console.log ('click link'+ url);\n\n        }\n\n    });\n\n\n\n\n    editor.on('blur', function(evt) {\n\n        console.log(\"blurr\");\n\n        save(evt, \"save\");\n        // editor.focus();\n\n    });\n\n\n    //change event\n    editor.on('change', function(evt) {\n        // console.log( 'Total bytes: ' + evt.editor.getData().length );\n        // console.log('saved'+$( \"#tittle\" ).val());\n        // $.post( \"/inc/save.php\", { editabledata: evt.editor.getData(), editorID: $( \"#tittle\" ).val() } );\n\n    });\n\n});\n\n\nfunction openInNewTab(url) {\n    var win = window.open(url, '_blank');\n    win.focus();\n}\n\nfunction hashCode(str) {\n    var hash = 0;\n    if (str.length == 0) return hash;\n    for (i = 0; i < str.length; i++) {\n        char = str.charCodeAt(i);\n        hash = ((hash << 5) - hash) + char;\n        hash = hash & hash; // Convert to 32bit integer\n    }\n    return hash;\n}\n\n\nfunction convertCoin(value, coin, tocoin) {\n    console.log('convertCoin')\n\n    let aa = \"<span data-cost='\" + value + \"' data-coin='\" + coin + \"' data-coin-convert='\" + tocoin + \"' class='cost'>To convert \" + coin + \" into \" + tocoin + \" \" + value + \"</span>\"\n    // $('td p:has(span.cost)').addClass('middle');\n    return aa\n}\n\n\nfunction doSomething() {\n    return new Promise((resolve, reject) => {\n        console.log(\"It is done.\");\n        // Succeed half of the time.\n        if (Math.random() > .5) {\n            resolve(\"SUCCESS\")\n        } else {\n            reject(\"FAILURE\")\n        }\n    })\n}\n\n\n\n\nfunction fanyi(text, lang, langto) {\n    return new Promise((resolve, reject) => {\n        console.log(`It is done. ${text} ${lang} ${langto}`);\n        // Succeed half of the time.\n        // lang = 'zh'\n        // langto = 'en'\n        var url = 'http://i487.lxc/fanyi'\n        var headers = {\n            \"Content-Type\": \"application/json\"\n        };\n        var data = {\n            \"from\": lang,\n            \"to\": langto,\n            \"src\": text,\n            \"i\": '1'\n        };\n        console.log('this is the text to translate ' + text)\n\n        var encode_params = $.param(data, true)\n        var url = url + '?' + encode_params\n\n        $.getJSON(url, function(data) {\n\n            resolve(data)\n        });\n\n\n    })\n\n}\n\n\n\n\n\n\nfunction message(str) {\n\n    $(\"#textinfo\").html(str).css({ opacity: 0.99 });\n    $(\"#textinfo\").animate({ opacity: 0 }, 1200);\n}\n\nfunction basename(path, suffix) {\n    var b = path\n    var lastChar = b.charAt(b.length - 1)\n\n    if (lastChar === '/' || lastChar === '\\\\') {\n        b = b.slice(0, -1)\n    }\n\n    b = b.replace(/^.*[\\/\\\\]/g, '')\n\n    if (typeof suffix === 'string' && b.substr(b.length - suffix.length) === suffix) {\n        b = b.substr(0, b.length - suffix.length)\n    }\n\n    return b\n}\n\n\nfunction dirname(path) {\n    return path.replace(/\\\\/g, '/').replace(/\\/[^\\/]*\\/?$/, '')\n}\n\nfunction agregatext(selector) {\n    var texts = '';\n\n    $(\".first_editor\").children(selector).each(function() {\n\n        $(this).children(\"p\").each(function() {\n\n            texts += $(this).text() + \"\\r\\n\";\n\n        });\n\n        var allListElements = $(\"li br\");\n\n        $(\".first_editor\").find(allListElements).each(function()\n            // $(this).nextAll(\"li\").each(function()\n            {\n                texts += \"  \" + $(this).contents().get(0).nodeValue + \"\\r\\n\";\n\n            });\n\n\n\n\n\n    });\n\n\n    return texts;\n}\n\n\n\n\n\n\nfunction save(evt, action) {\n\n\n    switch (action) {\n        case \"save\": // editor save content\n            console.log(\"editor save 2\");\n            $.post(\"/inc/save.php\", { action: \"save\", data: evt.editor.getData(), path: \"/data/rw1/m1\", file: $(\"#tittle\").val() });\n            //  to prevent time consuming\n            //  read();\n            message(\"file saved\");\n\n\n\n\n            break;\n        case \"savetofile\":\n            console.log(\"save text\");\n            var file = $(\".first_editor\").children(\".path\").text();\n            console.log(file);\n            message(\"file saved \" + file);\n\n\n            // var file = \"/data/m3/mm.mm\";\n            var path = dirname(file);\n            var file = basename(file, '');\n            // var data='';\n            // $(\"#savetofile\").each(function() {\n            //    data = data  +  $(this).val();\n            //    //code\n            // });\n            data = agregatext(\".savetofile\");\n            //  data=\"test\";\n            console.log(data);\n            console.log(path);\n            console.log(file);\n\n            $.post(\"/inc/save.php\", { action: \"save\", data: data, path: path, file: file });\n\n\n            // console.log(path.basename(str, '.html'));\n\n            break;\n        default:\n\n\n            console.log(\"save default\");\n\n    }\n\n\n\n\n    //  console.log(\"hascode is is: \" + hashCode($( \"#hidden\" ).text()));\n    // console.log (\"1 \" +hashCode($( \"#hidden\" ).text()));\n    // console.log (\"2 \" +$( \"#hash\" ).text());\n\n}\n\n\nfunction read() {\n\n\n\n    $.get('/m1/' + $(\"#tittle\").val(), { \"_\": $.now() }, function(data2) {\n        console.log(\"reading file \" + '/m1/' + $(\"#tittle\").val());\n\n\n        // console.log(data);\n        //  $('#hidden').html(data2);\n        $('.first_editor').html(data2);\n\n        highlightjsworkers();\n\n\n        // $('.first_editor').html(data);\n\n    }).done(function() {\n\n\n        // if (hashCode($( \"#hidden\" ).text()) == $( \"#hash\" ).text()   )\n        // message(\"no modifiations\");\n        // else {\n        //   message (\"saved!\")\n        //   $( \"#hash\" ).html(hashCode($( \"#hidden\" ).text()));}\n        //\n    }).fail(function() {\n        //$('.first_editor').html(\"<h1>error 404 no file</h1>\"); // or whatever\n    }, 'text');\n\n}\n\nfunction highlightjsworkers() {\n\n    // hljs.initHighlightingOnLoad();\n    $('pre code').each(function(i, block) {\n        hljs.highlightBlock(block);\n    });\n\n    //  var code = document.querySelector('pre code');\n    //  var worker = new Worker('/js/worker.js');\n    //  if (!worker.onmessage) {//avoid null object in case doesnt exists\n    //  worker.onmessage = function(event) { code.innerHTML = event.data; }\n    // // worker.postMessage(code.textContent);\n    // }\n};\n\n\n//rename file\nfunction rename() {\n\n    console.log(\"change this file: \" + $(\"#tittle\").val() + \" by this file: \" + $(\"#rename\").val());\n    $.post(\"/inc/save.php\", { action: \"rename\", file: $(\"#tittle\").val(), path: \"/data/rw1/m1\", fileout: $(\"#rename\").val() }, function() {\n            $(\"#tittle\").val($(\"#rename\").val());\n        })\n        .done(function() {\n            message(\"file renamed to \" + $(\"#rename\").val());\n        })\n        .fail(function() {\n            alert(\"error\");\n        });\n\n};\n\n\n//rename file\nfunction version() {\n\n    console.log(\"creating a new version of this: \" + $(\"#tittle\").val());\n\n    $.post(\"/inc/save.php\", { action: \"version\", file: $(\"#tittle\").val(), path: \"/data/rw1/m1\", fileout: $(\"#rename\").val() }, function() {\n            $(\"#tittle\").val($(\"#rename\").val());\n        })\n        .done(function() {\n            message(\"New version backed\");\n        })\n        .fail(function() {\n            alert(\"error\");\n        });\n\n};\n\n\n\n\n\n\nfunction loadautosearch(source) {\n\n    var options = {\n        url: source,\n        getValue: \"filename\",\n        // minLength: 3,\n        //  autoFocus: true,\n        //  my : \"100 100\",\n        //  at: \"bottom\" ,\n        //  of:\"#tittle\",\n\n        template: {\n            type: \"description\",\n            fields: {\n                // description: \"email\"\n            }\n        },\n        list: {\n            match: {\n                enabled: true\n            }\n        },\n\n        theme: \"plate-dark\"\n    };\n\n    $(\"#tittle\").easyAutocomplete(options);\n\n};\n\n\n\n\nfunction loadVideo(element) {\n\n    console.log('element is videolink');\n    console.log(element.getAttribute(\"value\"));\n    src = element.getAttribute(\"value\");\n    // $('video.videoread source').attr('src', src);\n    $('#my-player_html5_api').attr('src', src);\n    $('#my-player_html5_api').load();\n    $('#my-player_html5_api').play();\n    // $(\"video.videoread\")[0].load();\n    // $(\"video.videoread\")[0].play();\n    // evt.data.dialog = 'tableProperties'   ;\n\n}\n\n\n\nfunction getParameterByName(name, url) {\n    if (!url) url = window.location.href;\n    name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n    var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\n        results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n}\n\n\nfunction insertBaidumap() {\n\n\n    var map = new BMap.Map(\"allmap\"); // 创建Map实例\n    map.centerAndZoom(new BMap.Point(116.404, 39.915), 11); // 初始化地图,设置中心点坐标和地图级别\n    //添加地图类型控件\n    map.addControl(new BMap.MapTypeControl({\n        mapTypes: [\n            BMAP_NORMAL_MAP,\n            BMAP_HYBRID_MAP\n        ]\n    }));\n    map.setCurrentCity(\"北京\"); // 设置地图显示的城市 此项是必须设置的\n    map.enableScrollWheelZoom(true); //开启鼠标滚轮缩放\n\n}","/*!\n * money.js / fx() v0.2\n * Copyright 2014 Open Exchange Rates\n *\n * JavaScript library for realtime currency conversion and exchange rate calculation.\n *\n * Freely distributable under the MIT license.\n * Portions of money.js are inspired by or borrowed from underscore.js\n *\n * For details, examples and documentation:\n * http://openexchangerates.github.io/money.js/\n */\n(function(root, undefined) {\n\n\t// Create a safe reference to the money.js object for use below.\n\tvar fx = function(obj) {\n\t\treturn new fxWrapper(obj);\n\t};\n\n\t// Current version.\n\tfx.version = '0.2';\n\n\n\t/* --- Setup --- */\n\n\t// fxSetup can be defined before loading money.js, to set the exchange rates and the base\n\t// (and default from/to) currencies - or the rates can be loaded in later if needed.\n\tvar fxSetup = root.fxSetup || {\n\t\trates : {},\n\t\tbase : \"\"\n\t};\n\n\t// Object containing exchange rates relative to the fx.base currency, eg { \"GBP\" : \"0.64\" }\n\tfx.rates = fxSetup.rates;\n\n\t// Default exchange rate base currency (eg \"USD\"), which all the exchange rates are relative to\n\tfx.base = fxSetup.base;\n\n\t// Default from / to currencies for conversion via fx.convert():\n\tfx.settings = {\n\t\tfrom : fxSetup.from || fx.base,\n\t\tto : fxSetup.to || fx.base\n\t};\n\n\n\t/* --- Conversion --- */\n\n\t// The base function of the library: converts a value from one currency to another\n\tvar convert = fx.convert = function(val, opts) {\n\t\t// Convert arrays recursively\n\t\tif (typeof val === 'object' && val.length) {\n\t\t\tfor (var i = 0; i< val.length; i++ ) {\n\t\t\t\tval[i] = convert(val[i], opts);\n\t\t\t}\n\t\t\treturn val;\n\t\t}\n\n\t\t// Make sure we gots some opts\n\t\topts = opts || {};\n\n\t\t// We need to know the `from` and `to` currencies\n\t\tif( !opts.from ) opts.from = fx.settings.from;\n\t\tif( !opts.to ) opts.to = fx.settings.to;\n\n\t\t// Multiple the value by the exchange rate\n\t\treturn val * getRate( opts.to, opts.from );\n\t};\n\n\t// Returns the exchange rate to `target` currency from `base` currency\n\tvar getRate = function(to, from) {\n\t\t// Save bytes in minified version\n\t\tvar rates = fx.rates;\n\n\t\t// Make sure the base rate is in the rates object:\n\t\trates[fx.base] = 1;\n\n\t\t// Throw an error if either rate isn't in the rates array\n\t\tif ( !rates[to] || !rates[from] ) throw \"fx error\";\n\n\t\t// If `from` currency === fx.base, return the basic exchange rate for the `to` currency\n\t\tif ( from === fx.base ) {\n\t\t\treturn rates[to];\n\t\t}\n\n\t\t// If `to` currency === fx.base, return the basic inverse rate of the `from` currency\n\t\tif ( to === fx.base ) {\n\t\t\treturn 1 / rates[from];\n\t\t}\n\n\t\t// Otherwise, return the `to` rate multipled by the inverse of the `from` rate to get the\n\t\t// relative exchange rate between the two currencies\n\t\treturn rates[to] * (1 / rates[from]);\n\t};\n\n\n\t/* --- OOP wrapper and chaining --- */\n\n\t// If fx(val) is called as a function, it returns a wrapped object that can be used OO-style\n\tvar fxWrapper = function(val) {\n\t\t// Experimental: parse strings to pull out currency code and value:\n\t\tif ( typeof\tval === \"string\" ) {\n\t\t\tthis._v = parseFloat(val.replace(/[^0-9-.]/g, \"\"));\n\t\t\tthis._fx = val.replace(/([^A-Za-z])/g, \"\");\n\t\t} else {\n\t\t\tthis._v = val;\n\t\t}\n\t};\n\n\t// Expose `wrapper.prototype` as `fx.prototype`\n\tvar fxProto = fx.prototype = fxWrapper.prototype;\n\n\t// fx(val).convert(opts) does the same thing as fx.convert(val, opts)\n\tfxProto.convert = function() {\n\t\tvar args = Array.prototype.slice.call(arguments);\n\t\targs.unshift(this._v);\n\t\treturn convert.apply(fx, args);\n\t};\n\n\t// fx(val).from(currency) returns a wrapped `fx` where the value has been converted from\n\t// `currency` to the `fx.base` currency. Should be followed by `.to(otherCurrency)`\n\tfxProto.from = function(currency) {\n\t\tvar wrapped = fx(convert(this._v, {from: currency, to: fx.base}));\n\t\twrapped._fx = fx.base;\n\t\treturn wrapped;\n\t};\n\n\t// fx(val).to(currency) returns the value, converted from `fx.base` to `currency`\n\tfxProto.to = function(currency) {\n\t\treturn convert(this._v, {from: this._fx ? this._fx : fx.settings.from, to: currency});\n\t};\n\n\n\t/* --- Module Definition --- */\n\n\t// Export the fx object for CommonJS. If being loaded as an AMD module, define it as such.\n\t// Otherwise, just add `fx` to the global object\n\tif (typeof exports !== 'undefined') {\n\t\tif (typeof module !== 'undefined' && module.exports) {\n\t\t\texports = module.exports = fx;\n\t\t}\n\t\texports.fx = fx;\n\t} else if (typeof define === 'function' && define.amd) {\n\t\t// Return the library as an AMD module:\n\t\tdefine([], function() {\n\t\t\treturn fx;\n\t\t});\n\t} else {\n\t\t// Use fx.noConflict to restore `fx` back to its original value before money.js loaded.\n\t\t// Returns a reference to the library's `fx` object; e.g. `var money = fx.noConflict();`\n\t\tfx.noConflict = (function(previousFx) {\n\t\t\treturn function() {\n\t\t\t\t// Reset the value of the root's `fx` variable:\n\t\t\t\troot.fx = previousFx;\n\t\t\t\t// Delete the noConflict function:\n\t\t\t\tfx.noConflict = undefined;\n\t\t\t\t// Return reference to the library to re-assign it:\n\t\t\t\treturn fx;\n\t\t\t};\n\t\t})(root.fx);\n\n\t\t// Declare `fx` on the root (global/window) object:\n\t\troot['fx'] = fx;\n\t}\n\n\t// Root will be `window` in browser or `global` on the server:\n}(this));\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2hvbWUvYWdhbGFuLy5ucG0tZ2xvYmFsL2xpYi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3Nlci1wYWNrL19wcmVsdWRlLmpzIiwibWFpbi5qcyIsIm5vZGVfbW9kdWxlcy9tb25leS9tb25leS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsIi8vXG4vLyBmdW5jdGlvbiBzYXZlaW50b2Jyb3dzZXIoZmlsZW5hbWUsaHRtbCl7XG4vL1xuLy8gLy8gZmlsZW5hbWU9JCggXCIjdGl0dGxlXCIgKS52YWwoKVxuLy8gLy8gaHRtbD1ldnQuZWRpdG9yLmdldERhdGEoKVxuLy8gLy8gbGFjayBvZiBzeW5jIGludG8gdGhlIHNlcnZlclxuLy8gICB2YXIgZGIgPSBuZXcgRGV4aWUoXCJtMTNcIik7XG4vLyAgIGRiLnZlcnNpb24oMSkuc3RvcmVzKHtcbi8vICAgICBmaWxlczogXCJmaWxlbmFtZSxodG1sXCJcbi8vICAgfSk7XG4vL1xuLy8gICBkYi5vcGVuKCkuY2F0Y2goZnVuY3Rpb24gKGUpIHtcbi8vICAgICAgYWxlcnQgKFwiT3BlbiBmYWlsZWQ6IFwiICsgZSk7fSk7XG4vL1xuLy9cbi8vICAgZGIudHJhbnNhY3Rpb24oXCJyd1wiLCBkYi5maWxlcywgZnVuY3Rpb24gKCkge1xuLy8gICAgICAgLy8gVXBkYXRlIHRoZSByZWdpc3RlciBpZiBleGlzdHMgaWYgbm90IGFkZFxuLy8gICAgICBkYi5maWxlcy53aGVyZShcImZpbGVuYW1lXCIpLmVxdWFscyhmaWxlbmFtZSkubW9kaWZ5KHtodG1sOiBodG1sfSkudGhlbihmdW5jdGlvbih1cGRhdGVkKVxuLy8gICAgICB7XG4vLyAgICAgICAgaWYgKHVwZGF0ZWQpXG4vLyAgICAgICAgICAgIGNvbnNvbGUubG9nIChcInBlZHJvIGZvdW5kIGFuZCB1cGRhdGVcIik7XG4vLyAgICAgICAgZWxzZVxuLy8gICAgICAgIHtcbi8vICAgICAgICBjb25zb2xlLmxvZyAoXCJwZWRybyBub3QgZm91bmQgXCIpO1xuLy8gICAgICAgIGRiLmZpbGVzLmFkZCh7ZmlsZW5hbWU6ICQoIFwiI3RpdHRsZVwiICkudmFsKCksIGh0bWw6ICBldnQuZWRpdG9yLmdldERhdGEoKX0pO30gfSk7ICAgfSk7XG4vL1xuLy8gfTtcblxuXG52YXIgY3RybEkgPSBmYWxzZTtcbnZhciBmeCA9IHJlcXVpcmUoJ21vbmV5Jyk7XG4vLyByZXF1aXJlKCdja2VkaXRvcicpO1xuLy8gQ0tFRElUT1IucmVwbGFjZSggJ2VkaXRvcicgKTtcblxuXG4vLyBBZGQgYW4gZXZlbnQgbGlzdGVuZXJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJuYW1lLW9mLWV2ZW50XCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAvLyBjb25zb2xlLmxvZyhlLmRldGFpbCk7IC8vIFByaW50cyBcIkV4YW1wbGUgb2YgYW4gZXZlbnRcIlxufSk7XG5cblxuLy8gJChcIi52aWRlb2xpbmtcIikuY2xpY2soZnVuY3Rpb24oKXtcblxuLy8gICAgIHZhciBzcmMgPSAkKHRoaXMpLmF0dHIoXCJ2YWx1ZVwiKTtcbi8vICAgIC8vIGFsZXJ0KHNyYyk7XG4vLyAvLyBjb25zb2xlLmxvZyhldnQpO1xuLy8gLy8gY29uc29sZS5sb2coJCh0aGlzKSk7XG4vLyAvLyBjb25zb2xlLmxvZyhcImNsaWNrZWQgdmlkZW9saW5rIGluIGNrZWRpdG9yXCIpO1xuLy8gbG9hZFZpZGVvKHNyYyk7XG5cblxuLy8gfSlcblxuLy8gZnVuY3Rpb24gbG9hZFZpZGVvMigpe1xuXG4vLyAgICAgY29uc29sZS5sb2coJ2NsaWNrZWQgbG9hZFZpZGVvMicpO1xuLy8gfVxuXG5cbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xuXG4gICAgLy8gdmFyIGIxID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJNV1wiKTtcbiAgICAvLyBiMS50YWJJbmRleCA9IDU7IC8vY2hhbmdlIHRoZSBkZWZhdWx0IHRhYmluZGV4XG5cblxuXG4gICAgdmFyIHVybCA9IGdldFBhcmFtZXRlckJ5TmFtZSgndXJsJyk7XG4gICAgaWYgKHVybCkge1xuXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHVybCk7XG5cbiAgICAgICAgJChcIiN0aXR0bGVcIikudmFsKHVybCk7XG4gICAgICAgICQoXCIjcmVuYW1lXCIpLnZhbCh1cmwpO1xuICAgICAgICAvLyAgcmVhZCgpO1xuICAgICAgICAvLyQoXCIuZmlyc3RfZWRpdG9yXCIpLmZvY3VzKCk7XG4gICAgICAgIC8vICQoXCIjdGl0dGxlXCIpLmZvY3VzKCkuc2VsZWN0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgJChcIiN0aXR0bGVcIikuZm9jdXMoKS5zZWxlY3QoKTtcbiAgICB9XG5cblxuICAgIC8vIGxvYWRhdXRvc2VhcmNoKFwiL3Jlc291cmNlcy9maWxlczIuanNvblwiKTtcblxuXG4gICAgLy8gJCggXCIuZmlyc3RfZWRpdG9yIGgzXCIgKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAvLyAgIGFsZXJ0KCdjbGlja2VkJyk7XG4gICAgLy8gICAkKHRoaXMpLm5leHRVbnRpbCggXCIuZmlyc3RfZWRpdG9yIGgzLCAuZmlyc3RfZWRpdG9yIGgyXCIgKS50b2dnbGUoKTtcbiAgICAvLyB9KTtcbiAgICAvLyAkKCBcIi5maXJzdF9lZGl0b3IgaDRcIiApLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgIC8vICAgJCh0aGlzKS5uZXh0VW50aWwoIFwiLmZpcnN0X2VkaXRvciBoNCwgLmZpcnN0X2VkaXRvciBoMyBcIiApLnRvZ2dsZSgpO1xuICAgIC8vIH0pO1xuICAgIC8vXG4gICAgLy8gJCggXCJoMlwiICkuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgLy8gICAkKHRoaXMpLm5leHQoIFwiaDIsIGgxXCIgKS50b2dnbGUoKTtcbiAgICAvLyB9KTtcbiAgICAvL1xuICAgIC8vICQoIFwiaDFcIiApLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgIC8vICAgJCh0aGlzKS5uZXh0KCBcImgxXCIgKS50b2dnbGUoKTtcbiAgICAvLyB9KTtcblxuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgcmV0dXJuOyAvLyBEbyBub3RoaW5nIGlmIHRoZSBldmVudCB3YXMgYWxyZWFkeSBwcm9jZXNzZWRcbiAgfVxuXG4gIHN3aXRjaCAoZXZlbnQua2V5KSB7XG4gICAgY2FzZSBcIkFycm93RG93blwiOlxuICAgICAgLy8gRG8gc29tZXRoaW5nIGZvciBcImRvd24gYXJyb3dcIiBrZXkgcHJlc3MuXG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiQXJyb3dVcFwiOlxuICAgICAgLy8gRG8gc29tZXRoaW5nIGZvciBcInVwIGFycm93XCIga2V5IHByZXNzLlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIkFycm93TGVmdFwiOlxuICAgICAgLy8gRG8gc29tZXRoaW5nIGZvciBcImxlZnQgYXJyb3dcIiBrZXkgcHJlc3MuXG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiQXJyb3dSaWdodFwiOlxuICAgICAgLy8gRG8gc29tZXRoaW5nIGZvciBcInJpZ2h0IGFycm93XCIga2V5IHByZXNzLlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIkVudGVyXCI6XG4gICAgICAvLyBEbyBzb21ldGhpbmcgZm9yIFwiZW50ZXJcIiBvciBcInJldHVyblwiIGtleSBwcmVzcy5cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJFc2NhcGVcIjpcbiAgICAgIC8vIERvIHNvbWV0aGluZyBmb3IgXCJlc2NcIiBrZXkgcHJlc3MuXG4gICAgICBjb25zb2xlLmxvZygncHJlc3MgZXNjYXBlJylcbiAgICAgICAgICAgICB0cmFuc2xhdGVfc2VsZWN0KCk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuOyAvLyBRdWl0IHdoZW4gdGhpcyBkb2Vzbid0IGhhbmRsZSB0aGUga2V5IGV2ZW50LlxuICB9XG5cbiAgLy8gQ2FuY2VsIHRoZSBkZWZhdWx0IGFjdGlvbiB0byBhdm9pZCBpdCBiZWluZyBoYW5kbGVkIHR3aWNlXG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG59LCB0cnVlKTtcblxuXG5mdW5jdGlvbiB0cmFuc2xhdGVfc2VsZWN0KCl7XG5cblxuICAgICAgICB0ZXh0ID0gd2luZG93LmdldFNlbGVjdGlvbigpLnRvU3RyaW5nKClcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0ZXh0KVxuICAgICAgICBsYW5nID0gJ3poJ1xuICAgICAgICBsYW5ndG8gPSAnZW4nXG4gICAgICAgIGZhbnlpKHRleHQsIGxhbmcsIGxhbmd0bykudGhlbihmdW5jdGlvbihhYSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYWEuc3JjKVxuICAgICAgICAgICAgYWEuZHN0ID0gYWEucGlueWluICsgXCI8YnI+XCIgKyBhYS50cmFuc2xhdGUgKyBhYS5oYW5kaVxuICAgICAgICAgICAgdmFyIHRyYWQgPSAnPGRpdiBjbGFzcz1cImF1ZGlvZmFueWlcIj4nICsgYWEuYXVkaW8gKyAnPC9kaXY+JyArYWEuc3JjICsgJzogPC9icj4gJyArIGFhLmRzdCA7XG4gICAgICAgICAgICAkKCcjZmFueWk1NScpLmh0bWwodHJhZClcbiAgICAgICAgfSk7XG5cbn1cblxuICAgICQoXCIuamllYmFcIikuZGJsY2xpY2soZnVuY3Rpb24oKSB7XG4gIFxuXG50cmFuc2xhdGVfc2VsZWN0KClcblxuXG4gICAgfSlcblxuXG5cbiAgICAkKFwiYnV0dG9uI3B1dHRvZ2V0aGVyXCIpLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWwgPSBlZGl0b3IuZXh0cmFjdFNlbGVjdGVkSHRtbCgpXG4gICAgICAgIGFhID0gc2VsLmdldEh0bWwoKS5yZXBsYWNlKC88YnI+L2dtLCAnJylcbiAgICAgICAgZWRpdG9yLmluc2VydEh0bWwoYWEpO1xuICAgIH0pXG5cbiAgICAkKFwiYnV0dG9uI2F1dG90cmFuc1wiKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgJChcInNwYW5bbGFuZz0nemgtY24nXVwiKS5jc3MoJ2NvbG9yJywgJ3JlZCcpXG4gICAgICAgIGxldCBsYW5nID0gJ3poJ1xuICAgICAgICBsZXQgbGFuZ3RvID0gJ2VuJ1xuICAgICAgICBsZXQgYmIgPSAkKFwic3BhbltsYW5nPSd6aC1jbiddOmVxKDEpXCIpLnRleHQoKVxuICAgICAgICBjb25zb2xlLmxvZyhgdG8gdHJhbnNsYXRlOiAke2JifWApXG4gICAgICAgIGZhbnlpKGJiLCAnemgnLCAnZW4nKS50aGVuKGZ1bmN0aW9uKGFhKSB7XG4gICAgICAgICAgICBsZXQgdHJhbnNsYXRpb24gPSBcIjxzcGFuIGNsYXNzPSdvcmlnaW5hbCcgbGFuZz0nXCIgKyBsYW5nICsgXCInIGRhdGEtcHNldWRvLWNvbnRlbnQ9J1wiICsgYWEuc3JjICsgXCInID4mbmJzcDs8L3NwYW4+PHNwYW4gY2xhc3M9J3RyYW5zbGF0ZScgIGxhbmc9J1wiICsgbGFuZ3RvICsgXCInID5cIiArIGFhLnRyYW5zbGF0ZSArIFwiPC9zcGFuPlwiXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhhYS5pKVxuICAgICAgICAgICAgJChcInNwYW5bbGFuZz0nemgtY24nXTplcSgxKVwiKS5odG1sKHRyYW5zbGF0aW9uKVxuICAgICAgICAgICAgJChcInNwYW5bbGFuZz0nemgtY24nXTplcSgxKVwiKS5hdHRyKCdsYW5nJywgJycpXG4gICAgICAgIH0pXG5cbiAgICB9KVxuXG5cblxuICAgICQoXCJidXR0b24jcG9zaXRpb25cIikuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdjbGlja2VkIHNhdmUgcG9zaXRpb24nKVxuICAgICAgICAkKFwiI3Njcm9sbEFyZWFcIikuc2Nyb2xsVG9wKClcblxuXG4gICAgfSk7XG5cbiAgICAkKFwiYnV0dG9uI3RyYW5zXCIpLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zb2xlLmxvZygnY2xpY2tlZCB0cmFuc2xhdGUnKVxuICAgICAgICAkKFwiLnRyYW5zbGF0ZVwiKS5zaG93KCk7XG4gICAgICAgICQoXCIub3JpZ2luYWxcIikuaGlkZSgpO1xuXG5cbiAgICB9KTtcblxuICAgICQoXCJidXR0b24jc2hvd3RyYW5zbGF0ZVwiKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ2NsaWNrZWQgc2hvd3RyYW5zbGF0ZScpXG4gICAgICAgICQoXCIudHJhbnNsYXRlXCIpLnNob3coKTtcbiAgICAgICAgJChcIi5vcmlnaW5hbFwiKS5zaG93KCk7XG5cbiAgICB9KTtcblxuXG4gICAgJChcImJ1dHRvbiNhZGRhYnNvbHV0ZXBhdGhcIikuY2xpY2soZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgY29uc29sZS5sb2coJ2NsaWNrZWQgYWRkYWJzb2x1dGVwYXRoMicpXG5cblxuICAgICAgICAkKCdpbWcnKS5lYWNoKGZ1bmN0aW9uKGksIHYpIHtcbiAgICAgICAgICAgIGlmICgkKHRoaXMpLmF0dHIoJ3NyYycpLmluY2x1ZGVzKFwiaHR0cFwiKSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdub3QgY2hhbmdlJylcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgYWFhID0gJ2h0dHA6Ly9pNDg3Lmx4Yy8nICsgJCh0aGlzKS5hdHRyKCdzcmMnKTtcbiAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoJ3NyYycsIGFhYSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJCh0aGlzKS5hdHRyKCdzcmMnKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICB9KTtcblxuICAgICQoXCJidXR0b24jc2hhcmVsaW5rXCIpLmNsaWNrKGZ1bmN0aW9uKCkge1xuXG5cbiAgICAgICAgY29uc29sZS5sb2coJ2NsaWNrZWQgc2hhcmVsaW5rICcpXG4gICAgICAgIGNvbnNvbGUubG9nKFwiaHR0cDovL2k0ODcubHhjL2VicmFpbj91cmw9XCIgKyAkKCcjdGl0dGxlJykudmFsKCkpXG5cbiAgICAgICAgJC5nZXRKU09OKCdlYnJhaW4/dXJsPScgKyAkKCcjdGl0dGxlJykudmFsKCksXG4gICAgICAgICAgICBmdW5jdGlvbihkYXRhKSB7XG5cbiAgICAgICAgICAgICAgICAkKCcjc2hhcmVsaW5rJykuYXR0cignaHJlZicsICdodHRwOi8vaTQ4Ny5seGMvdmlldy5waHA/dXJsPScgKyBkYXRhLmhhc2gpXG5cbiAgICAgICAgICAgIH0pXG5cblxuICAgIH0pO1xuXG4gICAgJChcImJ1dHRvbiN1cGRhdGVjb3N0XCIpLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zb2xlLmxvZygnY2xpY2tlZCB1cGRhdGVkY29zdCAnKVxuXG4gICAgICAgICQuZ2V0SlNPTihcbiAgICAgICAgICAgIC8vIE5COiB1c2luZyBPcGVuIEV4Y2hhbmdlIFJhdGVzIGhlcmUsIGJ1dCB5b3UgY2FuIHVzZSBhbnkgc291cmNlIVxuICAgICAgICAgICAgJ2h0dHBzOi8vb3BlbmV4Y2hhbmdlcmF0ZXMub3JnL2FwaS9sYXRlc3QuanNvbj9hcHBfaWQ9OTYwZjBiOGRjYTkzNDQzMjhiMTNlZjgxNjk1N2Q4MTAnLFxuICAgICAgICAgICAgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIC8vIENoZWNrIG1vbmV5LmpzIGhhcyBmaW5pc2hlZCBsb2FkaW5nOlxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZnggIT09IFwidW5kZWZpbmVkXCIgJiYgZngucmF0ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgZngucmF0ZXMgPSBkYXRhLnJhdGVzO1xuICAgICAgICAgICAgICAgICAgICBmeC5iYXNlID0gZGF0YS5iYXNlO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3VwZGF0aW5nIGNvc3QuLi4nKVxuXG4gICAgICAgICAgICAgICAgICAgICQoJy5jb3N0JykuZWFjaChmdW5jdGlvbihpLCB2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhYSA9ICQodGhpcykuYXR0cignZGF0YS1jb3N0JylcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsID0gTWF0aC5yb3VuZChmeChhYSkuZnJvbShcIkNOWVwiKS50byhcIkVVUlwiKSAvIDAuMDA5NSkgLyAxMDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImNvbnZlcnRpbmcgQ05ZIGludG8gRVVSXCIgKyBmeCgxKS5mcm9tKFwiQ05ZXCIpLnRvKFwiRVVSXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykudGV4dCh0b3RhbClcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiBub3QsIGFwcGx5ICB0byBmeFNldHVwIGdsb2JhbDpcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZ4U2V0dXAgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByYXRlczogZGF0YS5yYXRlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhc2U6IGRhdGEuYmFzZVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGQgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgIHZhciBkYXRldGltZSA9IGQuZ2V0RnVsbFllYXIoKSArICctJyArIGQuZ2V0TW9udGgoKSArICctJyArIGQuZ2V0RGF0ZSgpO1xuICAgICAgICAgICAgICAgIGVkaXRvci5pbnNlcnRIdG1sKFwiPHNwYW4gY2xhc3M9J2luZm9ybWF0aW9uJz4gZGF0ZTogXCIgKyBkYXRldGltZSArIFwiIENOWSB0byBFVVIgQ29udmVydCByYXRlIGlzICBcIiArIGZ4KDEpLmZyb20oXCJDTllcIikudG8oXCJFVVJcIikgKyBcIjwvc3Bhbj5cIilcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuXG5cblxuXG5cbiAgICB9KTtcbiAgICAvLyBodHRwczovL29wZW5leGNoYW5nZXJhdGVzLmdpdGh1Yi5pby9tb25leS5qcy8jZG93bmxvYWRcblxuXG4gICAgJChcIiN0aXR0bGVcIikuZm9jdXNvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCcxJyk7XG5cbiAgICAgICAgY29uc29sZS5sb2coJChcIiN0aXR0bGVcIikudmFsKCkpO1xuICAgICAgICAkKFwiI3JlbmFtZVwiKS52YWwoJChcIiN0aXR0bGVcIikudmFsKCkpO1xuICAgICAgICAkKCcuZmlyc3RfZWRpdG9yJykuYXR0cignaWQnLCAkKFwiI3RpdHRsZVwiKS52YWwoKSk7XG4gICAgICAgICQoJy5maXJzdF9lZGl0b3InKS5hdHRyKFwiY29udGVudGVkaXRhYmxlXCIsIFwidHJ1ZVwiKTtcbiAgICAgICAgJCgnLmZpcnN0X2VkaXRvcicpLmZvY3VzKCk7XG4gICAgICAgIHJlYWQoKTtcbiAgICAgICAgLy8gZWRpdG9yLnNldERhdGEoJCggXCIjaGlkZGVuXCIgKS5odG1sKCkpOyAgLy8gbG9hZCBkYXRhIGluIHRoZSBlZGl0b3JcblxuICAgICAgICAvLyBobGpzLmluaXRIaWdobGlnaHRpbmdPbkxvYWQoKTtcblxuICAgIH0pO1xuXG5cblxuXG4gICAgJChcIiNyZW5hbWVcIikuZm9jdXNvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCcyJyk7XG5cbiAgICAgICAgaWYgKCQoXCIjdGl0dGxlXCIpLnZhbCgpID09ICQoXCIjcmVuYW1lXCIpLnZhbCgpKVxuXG4gICAgICAgICAgICAvLyBlZGl0b3Iuc2V0RGF0YSgkKCBcIiNoaWRkZW5cIiApLmh0bWwoKSk7ICAvLyBsb2FkIGRhdGEgaW4gdGhlIGVkaXRvclxuICAgICAgICAgICAgcmVhZCgpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlbmFtZSgpO1xuICAgICAgICB9XG5cblxuICAgIH0pO1xuXG5cblxuXG5cbiAgICBDS0VESVRPUi5pbnN0YW5jZXNbJ2ludHJvZHVjdGlvbiddLmRlc3Ryb3koKTtcbiAgICB2YXIgZWRpdG9yID0gQ0tFRElUT1IuaW5saW5lKFwiaW50cm9kdWN0aW9uXCIpO1xuXG5cblxuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncGFzdGUnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIC8vICAgIHZhciBodG1sID0gZS5jbGlwYm9hcmREYXRhLmdldERhdGEgKFwiVGV4dFwiKTtcbiAgICAgICAgLy8gZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAvLyAgICAgIGlmICggY3RybEkgKXtcbiAgICAgICAgLy8gICAgICAgIC8vIENLRURJVE9SLmluc3RhbmNlc1snaW50cm9kdWN0aW9uJ10uZGVzdHJveSgpO1xuICAgICAgICAvLyAgICAgICAgLy9cbiAgICAgICAgLy8gICAgICAgIC8vICAgIHZhciBlZGl0b3IgPSBDS0VESVRPUi5pbmxpbmUoXCJpbnRyb2R1Y3Rpb25cIik7XG4gICAgICAgIC8vXG4gICAgICAgIC8vICAgICAgICBjb25zb2xlLmxvZyAoXCJwYXN0ZSBldmVudFwiKTtcbiAgICAgICAgLy8gICAgICAgIC8vIGVkaXRvci5pbnNlcnRIdG1sKGh0bWwpO1xuICAgICAgICAvLyAgICAgIH1cbiAgICAgICAgLy8gICAgLy8gdmFyIGh0bWwgPSBlLmNsaXBib2FyZERhdGEuZ2V0RGF0YSgndGV4dC9odG1sJyk7XG4gICAgICAgIC8vICAgIGNvbnNvbGUubG9nKGh0bWwpO1xuICAgICAgICAvLyAgICAvLyBXaGF0ZXZlciB5b3Ugd2FudCB0byBkbyB3aXRoIHRoZSBodG1sXG4gICAgfSk7XG5cblxuICAgIGVkaXRvci5vbigncGFzdGUnLCBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgZXZ0LnN0b3AoKTtcbiAgICAgICAgdmFyIGRhdGEgPSBldnQuZGF0YS5kYXRhVmFsdWU7XG5cbiAgICAgICAgaWYgKHdpbmRvdy5jaHJvbWUgfHwgd2luZG93LnNhZmFyaSkge1xuICAgICAgICAgICAgLy8gcmVtb3Zpbmcgc3BhbiB3cmFwcGVyIG9uIHdlYmtpdCBicm93c2Vycy5cbiAgICAgICAgICAgIGRhdGEgPSAkKGRhdGEpLmh0bWwoKTtcbiAgICAgICAgfVxuICAgICAgICBldnQuZWRpdG9yLmluc2VydEh0bWwoZGF0YSk7XG4gICAgfSk7XG5cblxuXG4gICAgZWRpdG9yLm9uKCdrZXknLCBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJzMnKTtcbiAgICAgICAgLy9odHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQ0MDE0NjkvaG93LXRvLXNlbGVjdC1hLXRleHQtcmFuZ2UtaW4tY2tlZGl0b3ItcHJvZ3JhbWF0aWNhbGx5XG5cbiAgICAgICAgdmFyIGNoYXJDb2RlID0gZXZ0LmRhdGEua2V5Q29kZTsgLy8gYXQgdGhlIG1vbWVudCB0aGlzIGlzIHdyb25nLCBrZXlDb2RlIG5lZWRzIHRvIGJlIHByb3Blcmx5IGNvbnZlcnRlZCB0byBjaGFyQ29kZVxuICAgICAgICAvLyB2YXIgY2xpcGJvYXJkRGF0YSA9IGV2dC5kYXRhLmRhdGFWYWx1ZTtcbiAgICAgICAgY29uc29sZS5sb2coY2hhckNvZGUpO1xuICAgICAgICB2YXIgdGFnID0gXCJoMVwiO1xuICAgICAgICAvLyAgY29uc29sZS5sb2coc2VsZWN0ZWRUZXh0KTtcbiAgICAgICAgc3dpdGNoIChjaGFyQ29kZSkge1xuICAgICAgICAgICAgY2FzZSAxMTE0MTYxOiAvLyBDdHJsIDFcbiAgICAgICAgICAgICAgICB0YWcgPSBcIjxoMT48L2gxPlwiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxMTE0MTYyOiAvLyBDdHJsIDJcbiAgICAgICAgICAgICAgICB0YWcgPSBcIjxoMj48L2gyPlwiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxMTE0MTYzOiAvLyBDdHJsIDNcbiAgICAgICAgICAgICAgICB0YWcgPSBcIjxoMz48L2gzPlwiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxMTE0MTY0OiAvLyBDdHJsIDRcbiAgICAgICAgICAgICAgICB0YWcgPSBcIjxoND48L2g0PlwiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxMTE0MTY2OiAvLyBDdHJsIDZcbiAgICAgICAgICAgICAgICB0YWcgPSBcIjxoNT48L2g1PlwiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxMTE0MTY5OiAvLyBDdHJsIDZcbiAgICAgICAgICAgICAgICBlZGl0b3IuaW5zZXJ0SHRtbChcIjxkaXYgY2xhc3M9J3NhdmV0b2ZpbGUnPnB1dCB0ZXh0PC9kaXY+XCIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDExMTQzMDA6IC8vIEN0cmwgLFxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjb252ZXJ0IENvaW4nKTtcblxuICAgICAgICAgICAgICAgIHNlbCA9IGVkaXRvci5nZXRTZWxlY3Rpb24oKS5nZXRTZWxlY3RlZFRleHQoKVxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHNlbClcblxuICAgICAgICAgICAgICAgIGVkaXRvci5pbnNlcnRIdG1sKGNvbnZlcnRDb2luKHNlbCwgXCJ5dWFuXCIsIFwiZXVyb1wiKSlcbiAgICAgICAgICAgICAgICAkKCdwOmhhcyhzcGFuLmNvc3QpJykuYWRkQ2xhc3MoJ21pZGRsZScpO1xuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cblxuICAgICAgICAgICAgY2FzZSAxMTE0MzA0OiAvLyBDdHJsIGBcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygncmVxdWVzdCBmYW55aScpO1xuICAgICAgICAgICAgICAgIGxldCBsYW5nID0gJChcIiNsYW5nXCIpLnZhbCgpLFxuICAgICAgICAgICAgICAgICAgICBsYW5ndG8gPSAkKFwiI2xhbmd0b1wiKS52YWwoKVxuXG5cblxuICAgICAgICAgICAgICAgIHNlbCA9IGVkaXRvci5nZXRTZWxlY3Rpb24oKS5nZXRTZWxlY3RlZFRleHQoKS5yZXBsYWNlKC8oXFxyXFxuXFx0fFxcbnxcXHJcXHQpL2dtLCBcIlwiKTtcbiAgICAgICAgICAgICAgICBpZiAoc2VsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZmFueWkoc2VsLCBsYW5nLCBsYW5ndG8pLnRoZW4oZnVuY3Rpb24oYWEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0cmFuc2xhdGlvbiA9IFwiPHNwYW4gY2xhc3M9J29yaWdpbmFsJyBsYW5nPSdcIiArIGxhbmcgKyBcIicgZGF0YS1wc2V1ZG8tY29udGVudD0nXCIgKyBhYS5zcmMgKyBcIicgPiZuYnNwOzwvc3Bhbj48c3BhbiBjbGFzcz0ndHJhbnNsYXRlJyAgbGFuZz0nXCIgKyBsYW5ndG8gKyBcIicgPlwiICsgYWEudHJhbnNsYXRlICsgXCI8L3NwYW4+XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvci5pbnNlcnRIdG1sKHRyYW5zbGF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG5cblxuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cblxuXG5cbiAgICAgICAgICAgIGNhc2UgNTU3MDYzODogLy8gQ3RybCBBbHQgTlxuICAgICAgICAgICAgICAgIC8vIHRhZz1cIjxiPjwvYj5cIjtcbiAgICAgICAgICAgICAgICB0YWcgPSBcIjxlbT48L2VtPlwiOyAvL2VtcGhhc2lzXG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNTU3MDYzNzogLy8gQ3RybCBBbHQgTVxuICAgICAgICAgICAgICAgIHRhZyA9IFwiPG1hcms+PC9tYXJrPlwiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA1NTcwNjI4OiAvLyBDdHJsIEFsdCBEXG4gICAgICAgICAgICAgICAgdmFyIGQgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgIHZhciBkYXRldGltZSA9IGQuZ2V0RnVsbFllYXIoKSArICctJyArIGQuZ2V0TW9udGgoKSArICctJyArIGQuZ2V0RGF0ZSgpO1xuICAgICAgICAgICAgICAgIHRhZyA9IFwiPGRlbCBkYXRldGltZT1cIiArIGRhdGV0aW1lICsgXCIgdGl0bGU9XCIgKyBkYXRldGltZSArIFwiPjwvZGl2PlwiOyAvL2RlbCB0ZXh0XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDU1NzA2MzM6IC8vIEN0cmwgQWx0IElcbiAgICAgICAgICAgICAgICB0YWcgPSBcIjxlbT48L2VtPlwiOyAvL2VtcGhhc2lzXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDIyMjgzMTQ6IC8vIFNoaWZ0IFogICBUZXN0XG4gICAgICAgICAgICAgICAgJChcIiNja2VfM190b3BcIikudG9nZ2xlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDMzNDI0MDg6IC8vIENUUkwgU2hpZnQgSCAgSGlkZS9zaG93IHRvb2wgYmFyXG4gICAgICAgICAgICAgICAgLy8gZXZ0LmRhdGEuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgLy8gZXZ0LmRhdGEucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAkKFwiI2NrZV8zX3RvcFwiKS50b2dnbGUoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTExNDE5NTogLy9DdHJsIFMgc2F2ZSBhIHZlcnNpb25cbiAgICAgICAgICAgICAgICB2ZXJzaW9uKCk7XG4gICAgICAgICAgICAgICAgaWYgKCQoJy5zYXZldG9maWxlJykubGVuZ3RoID4gMClcbiAgICAgICAgICAgICAgICAgICAgc2F2ZShldnQsIFwic2F2ZXRvZmlsZVwiKTtcblxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDMzNDI0MDQ6IC8vIEN0cmwgU2hpZnQgRCAgSW5zZXJ0IGRldGFpbC9TdW1tYXJ5IGh0bWxcbiAgICAgICAgICAgICAgICB2YXIgc2VsID0gZWRpdG9yLmdldFNlbGVjdGlvbigpLmdldFNlbGVjdGVkVGV4dCgpO1xuICAgICAgICAgICAgICAgIGlmIChzZWwubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGV0YWlscyA9IG5ldyBDS0VESVRPUi5kb20uZWxlbWVudCgnZGV0YWlscycpO1xuICAgICAgICAgICAgICAgICAgICBkZXRhaWxzLnNldEh0bWwoJyA8c3VtbWFyeT4nICsgc2VsICsgJzwvc3VtbWFyeT48cD5Nb3JlIGluZm8gYWJvdXQgdGhlIGRldGFpbHMuPC9wPicpO1xuICAgICAgICAgICAgICAgICAgICBlZGl0b3IuaW5zZXJ0RWxlbWVudChkZXRhaWxzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDExMTQxOTE6IC8vIEN0cmwgTyAgT3BlbiBjb2RlU25pcHBldCBkaWFsb2dcbiAgICAgICAgICAgICAgICBlZGl0b3IuZXhlY0NvbW1hbmQoJ2NvZGVTbmlwcGV0Jyk7IC8vd2lkZ2V0XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMTExNDE4NTogLy8gQ3RybCBJICBJbnNlcnRodG1sXG4gICAgICAgICAgICAgICAgLy8gdmFyIHNlbCA9IGVkaXRvci5nZXRTZWxlY3Rpb24oKS5nZXRTZWxlY3RlZFRleHQoKTtcbiAgICAgICAgICAgICAgICBjdHJsSSA9ICFjdHJsSTtcblxuICAgICAgICAgICAgICAgIC8vIGV2dC5kYXRhLmRhdGFWYWx1ZSA9IGV2dC5kYXRhLmRhdGFWYWx1ZVxuICAgICAgICAgICAgICAgIC8vIGVkaXRvci5maXJlKCAncGFzdGUnLGVkaXRvcik7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coZS5jbGlwYm9hcmREYXRhLmdldERhdGEoJ3RleHQvaHRtbCcpKTtcblxuICAgICAgICAgICAgICAgIC8vIFRoaXMgY29kZSBvYnZpb3VzbHkgd2lsbCBub3QgcHJlc2VydmUgdGhlIGNhc2Ugb2YgdGhlIGZpcnN0IGFuZCBsYXN0IGxldHRlcnMuXG4gICAgICAgICAgICAgICAgLy8gTGV0IGl0IGJlIGFuIGV4ZXJjaXNlIGZvciB0aGUgcmVhZGVyIDspLlxuICAgICAgICAgICAgICAgIC8vIGVkaXRvci5leGVjQ29tbWFuZCggJ2luc2VydGh0bWw0eCcpOyAgLy93aWRnZXRcblxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDExMTQxODI6IC8vIEN0cmwgRiBvcGVuIGRpYWxvZyBGaW5kIGFuZCByZXBsYWNlXG4gICAgICAgICAgICAgICAgZWRpdG9yLmV4ZWNDb21tYW5kKCdmaW5kJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMzM0MjQwMjogLy8gQ3RybCBTaGlmdCBCXG4gICAgICAgICAgICAgICAgZWRpdG9yLmluc2VydEh0bWwoXCI8YnIvPlwiKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAvLyBjYXNlIDc3OTg4Njg6Ly8gQ3RybCBBTFQgU0hJVCBUXG4gICAgICAgICAgICAgICAgLy8gICBlZGl0b3IuaW5zZXJ0SHRtbCggXCI8dGFibGUgY2xhc3M9dGFibGUxQ2xhc3MnID4gPHRib2R5PiBcXFxuICAgICAgICAgICAgICAgIC8vICAgICAgPHRyPjx0ZD4xPC90ZD48dGQ+MjwvdGQ+PC90cj48dHI+PHRkPjE8L3RkPjx0ZD4yPC90ZD48L3RyPiBcXFxuICAgICAgICAgICAgICAgIC8vICAgICAgPC90Ym9keT48L3RhYmxlPlwiKTtcbiAgICAgICAgICAgICAgICAvLyAgIC8vICBlZGl0b3IuaW5zZXJ0SHRtbCggY2xpcGJvYXJkRGF0YSk7XG4gICAgICAgICAgICAgICAgLy8gICAgIC8vIGNvbnNvbGUubG9nKGNsaXBib2FyZERhdGEpO1xuICAgICAgICAgICAgICAgIC8vICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAzMzQyNDIyOiAvLyBDdHJvbCBzaGlmdCBWXG4gICAgICAgICAgICAgICAgdGV4dG8gPSAnQ3J0bCArIFNISUZUIFYnOyAvLyBDdHJsIDFcbiAgICAgICAgICAgICAgICAvLyB0ZXh0ID0gd2luZG93LmNsaXBib2FyZERhdGEuZ2V0RGF0YShcIlRleHRcIik7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2codGV4dG8pO1xuICAgICAgICAgICAgICAgIC8vIGVkaXRvci5pbnNlcnRIdG1sKCBjbGlwYm9hcmREYXRhKTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0ZXh0byk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRleHRvID0gJ090aGVyIGtleSc7XG4gICAgICAgIH1cblxuXG4gICAgICAgIHZhciBrZXlwcmVzcyA9IFsxMTE0MTYxLCAxMTE0MTYyLCAxMTE0MTYzLCAxMTE0MTY0LCAxMTE0MTY2LCAxMTE0MTY5LCA1NTcwNjM3LCA1NTcwNjI4LCA1NTcwNjMzLCA1NTcwNjM4XTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coa2V5cHJlc3MuaW5kZXhPZihjaGFyQ29kZSkpO1xuICAgICAgICBpZiAoa2V5cHJlc3MuaW5kZXhPZihjaGFyQ29kZSkgPiAtMSkgeyAvLyByZXRhZyB0aGUgc2VsZWN0IGFyZWFcbiAgICAgICAgICAgIHZhciBzZWwgPSBlZGl0b3IuZ2V0U2VsZWN0aW9uKCkuZ2V0U2VsZWN0ZWRUZXh0KCk7XG4gICAgICAgICAgICBpZiAoc2VsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAvLyAgdmFyIG5ld0VsZW1lbnQgPSBuZXcgQ0tFRElUT1IuZG9tLmVsZW1lbnQodGFnKTtcbiAgICAgICAgICAgICAgICB2YXIgbmV3RWxlbWVudCA9IENLRURJVE9SLmRvbS5lbGVtZW50LmNyZWF0ZUZyb21IdG1sKHRhZylcbiAgICAgICAgICAgICAgICAvLyBuZXdFbGVtZW50LnNldEF0dHJpYnV0ZXMoe3N0eWxlOiAnJ30pO1xuICAgICAgICAgICAgICAgIG5ld0VsZW1lbnQuc2V0VGV4dChzZWwpO1xuICAgICAgICAgICAgICAgIGVkaXRvci5pbnNlcnRFbGVtZW50KG5ld0VsZW1lbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgbmV3RWxlbWVudCA9IG5ldyBDS0VESVRPUi5kb20uZWxlbWVudCh0YWcpO1xuICAgICAgICAgICAgICAgIC8vIG5ld0VsZW1lbnQuc2V0QXR0cmlidXRlcyh7c3R5bGU6ICcnfSk7XG4gICAgICAgICAgICAgICAgbmV3RWxlbWVudC5zZXRUZXh0KHNlbCk7XG4gICAgICAgICAgICAgICAgLy8gIGVkaXRvci5pbnNlcnRFbGVtZW50KG5ld0VsZW1lbnQpLnNlbGVjdEVsZW1lbnQoKTtcbiAgICAgICAgICAgICAgICAvLyAgZWRpdG9yLmdldFNlbGVjdGlvbigpLnNlbGVjdEVsZW1lbnQobmV3RWxlbWVudCk7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cbiAgICB9KTtcblxuXG5cblxuXG4gICAgLy8gb3ZlcnJpZGUgc2hvcnRjdXQgZmlyZWZveCBrZXlib2FyZFxuICAgICQoJy5maXJzdF9lZGl0b3InKS5rZXlwcmVzcyhmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCc0Jyk7XG5cblxuICAgICAgICAvLyBjb25zb2xlLmxvZygnZXZlbnRvIGVzOiAnKyBldmVudC5rZXkgKydzaGlmdDogJytldmVudC5jdHJsS2V5ICsgJ2NydGw6ICcrIGV2ZW50LmN0cmxLZXkpO1xuICAgICAgICB2YXIgYSA9IGV2ZW50LmtleTtcbiAgICAgICAgdmFyIGIgPSBldmVudC5jdHJsS2V5O1xuICAgICAgICB2YXIgYyA9IGV2ZW50LnNoaWZ0S2V5O1xuICAgICAgICB2YXIgZCA9IGV2ZW50LmFsdEtleTtcbiAgICAgICAgdmFyIHJlc3BvbnNlID0gZXZlbnQua2V5ICsgZXZlbnQuY3RybEtleSArIGV2ZW50LnNoaWZ0S2V5ICsgZXZlbnQuYWx0S2V5O1xuICAgICAgICAvLyAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhiKTtcbiAgICAgICAgc3dpdGNoICh0cnVlKSB7XG5cblxuICAgICAgICAgICAgY2FzZSAoYSA9PSAnRicgJiYgYiAmJiBjICYmIGQpOlxuICAgICAgICAgICAgICAgIHZhciBzZWwgPSBlZGl0b3IuZ2V0U2VsZWN0aW9uKCkuZ2V0U2VsZWN0ZWRUZXh0KCk7XG4gICAgICAgICAgICAgICAgc2VsID0gc2VsLnJlcGxhY2UoL1xccysvZywgJysnKTs7IC8vcmVwbGFjZSBhbnkgc3BhY2Ugd2l0aCArXG4gICAgICAgICAgICAgICAgb3BlbkluTmV3VGFiKCdodHRwczovL2VuLndpa2lwZWRpYS5vcmcvdy9pbmRleC5waHA/c2VhcmNoPScgKyBzZWwpO1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHNlbCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgKGEgPT0gJ0YnICYmIGIgJiYgYyk6XG4gICAgICAgICAgICAgICAgdmFyIHNlbCA9IGVkaXRvci5nZXRTZWxlY3Rpb24oKS5nZXRTZWxlY3RlZFRleHQoKTtcbiAgICAgICAgICAgICAgICBzZWwgPSBzZWwucmVwbGFjZSgvXFxzKy9nLCAnKycpOzsgLy9yZXBsYWNlIGFueSBzcGFjZSB3aXRoICtcbiAgICAgICAgICAgICAgICBvcGVuSW5OZXdUYWIoJ2h0dHBzOi8vd3d3Lmdvb2dsZS5jb20vc2VhcmNoP3E9JyArIHNlbCk7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coc2VsKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuXG4gICAgICAgICAgICBjYXNlIChhID09ICdIJyAmJiBiICYmIGMpOlxuICAgICAgICAgICAgY2FzZSAoYSA9PSAncycgJiYgYik6XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy9hdm9pZCBvdGhlciBzaG9ydGN1dCBrZXlzXG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAvLyBjYXNlIChhID09ICdMJyAmJiBiICAmJiBjKSA6IC8vIEN0cmwgU2hpZnQgTFxuICAgICAgICAgICAgICAgIC8vICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy9hdm9pZCBvdGhlciBzaG9ydGN1dCBrZXlzXG4gICAgICAgICAgICAgICAgLy8gICAgIHRleHQgPSBlZGl0b3IuZ2V0Q2xpcGJvYXJkRGF0YShcIlRleHRcIik7XG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvLyAgICAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy8gYnJlYWs7XG5cblxuXG5cbiAgICAgICAgICAgIGNhc2UgKGEgPT0gJ2knICYmIGIgJiYgZCk6IC8vQ3RybCBBbHQgaVxuICAgICAgICAgICAgICAgIGVkaXRvci5leGVjQ29tbWFuZCgnbWF0aGpheCcpOyAvL3dpZGdldFxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIChhID09ICdpJyAmJiBiKTpcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygncHJlc3MgY3RybCBJJyk7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy9hdm9pZCBvdGhlciBzaG9ydGN1dCBrZXlzXG5cbiAgICAgICAgICAgICAgICBlZGl0b3IuZXhlY0NvbW1hbmQoJ2luc2VydGh0bWw0eCcpOyAvL3dpZGdldFxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG5cblxuICAgICAgICB9XG5cblxuICAgICAgICAvLyBpZiAoZXZlbnQua2V5ID09PSAnSCcgJiYgZXZlbnQuY3RybEtleSAmJiBldmVudC5zaGlmdEtleSAgKVxuICAgICAgICAvLyAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgLy8gaWYgKGV2ZW50LmtleSA9PT0gJ3MnICYmIGV2ZW50LmN0cmxLZXkgIClcbiAgICAgICAgLy8gICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSk7XG5cblxuICAgIGVkaXRvci5vbigncGFzdGUnLCBmdW5jdGlvbihldnQpIHtcblxuICAgICAgICAvL1xuICAgICAgICAvLyBpZiAoIGN0cmxJID09IDEpe1xuICAgICAgICAvL1xuICAgICAgICAvLyAgIC8vIHZhciBodG1sID0gZWRpdG9yLmdldENsaXBib2FyZERhdGEoXCJUZXh0XCIpO1xuICAgICAgICAvLyAgIC8vIGNvbnNvbGUubG9nIChcInBhc3RlIGV2ZW50XCIgKyBodG1sKTtcbiAgICAgICAgLy8gICAvLyBlZGl0b3IuaW5zZXJ0SHRtbChodG1sKTtcbiAgICAgICAgLy8gICBjdHJsST0wO1xuICAgICAgICAvLyAgIGVkaXRvci5nZXRDbGlwYm9hcmREYXRhKCB7IHRpdGxlOiAnR2V0IG15IGRhdGEnIH0sIGZ1bmN0aW9uKCBkYXRhICkge1xuICAgICAgICAvLyAgICAgICBpZiAoIGRhdGEgKVxuICAgICAgICAvLyAgICAgICAgICAgY29uc29sZS5sb2coICdkYXRhIGlzOiAnICsgZGF0YS5kYXRhVmFsdWUgKTtcbiAgICAgICAgLy8gICB9ICk7XG4gICAgICAgIC8vXG4gICAgICAgIC8vIH1cbiAgICAgICAgLy9cblxuXG5cblxuICAgICAgICAvLyBoaWdobGlnaHRqc3dvcmtlcnMoKTtcbiAgICB9KTtcblxuXG4gICAgZWRpdG9yLm9uKCdmb2N1cycsIGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICAvLyBoaWdobGlnaHRqc3dvcmtlcnMoKTtcbiAgICB9KTtcblxuICAgIGVkaXRvci5vbignY2xpY2snLCBmdW5jdGlvbihldnQpIHtcblxuICAgICAgICBjb25zb2xlLmxvZygnY2xpY2snKTtcblxuICAgIH0pO1xuXG4gICAgZWRpdG9yLm9uKCdkb3VibGVjbGljaycsIGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICB2YXIgZWxlbWVudCA9IGV2dC5kYXRhLmVsZW1lbnQ7XG4gICAgICAgIC8vY29uc29sZS5sb2coJ2RvdWJsZWNsaWNrJyk7XG4gICAgICAgIGNsYXNzZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIik7XG4gICAgICAgIGNvbnNvbGUubG9nKCdkb3VibGVjbGljayBpbiBjbGFzcyAnICsgY2xhc3NlKVxuICAgICAgICBpZiAoY2xhc3NlID09ICdqaWViYScpe1xuXG4gICAgICAgICAgIHRyYW5zbGF0ZV9zZWxlY3QoKTtcblxuXG5cbiAgICAgICAgfVxuICAgICAgICBpZiAoY2xhc3NlID09ICd2aWRlb2xpbmsnKSB7XG4gICAgICAgICAgICBsb2FkVmlkZW8oZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgY2xhc3NlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKTtcbiAgICAgICAgaWYgKGNsYXNzZSA9PSAndmlkZW9saW5rJykge1xuICAgICAgICAgICAgbG9hZFZpZGVvKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0YWcgPSBlbGVtZW50LmdldE5hbWUoKTtcbiAgICAgICAgLy8gY29uc29sZS5sb2codGFnKTtcbiAgICAgICAgaWYgKHRhZyA9PSAnYScpIHtcbiAgICAgICAgICAgIHVybCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKTtcbiAgICAgICAgICAgIG9wZW5Jbk5ld1RhYih1cmwpO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cgKCdjbGljayBsaW5rJysgdXJsKTtcblxuICAgICAgICB9XG5cbiAgICB9KTtcblxuXG5cblxuICAgIGVkaXRvci5vbignYmx1cicsIGZ1bmN0aW9uKGV2dCkge1xuXG4gICAgICAgIGNvbnNvbGUubG9nKFwiYmx1cnJcIik7XG5cbiAgICAgICAgc2F2ZShldnQsIFwic2F2ZVwiKTtcbiAgICAgICAgLy8gZWRpdG9yLmZvY3VzKCk7XG5cbiAgICB9KTtcblxuXG4gICAgLy9jaGFuZ2UgZXZlbnRcbiAgICBlZGl0b3Iub24oJ2NoYW5nZScsIGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICAvLyBjb25zb2xlLmxvZyggJ1RvdGFsIGJ5dGVzOiAnICsgZXZ0LmVkaXRvci5nZXREYXRhKCkubGVuZ3RoICk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdzYXZlZCcrJCggXCIjdGl0dGxlXCIgKS52YWwoKSk7XG4gICAgICAgIC8vICQucG9zdCggXCIvaW5jL3NhdmUucGhwXCIsIHsgZWRpdGFibGVkYXRhOiBldnQuZWRpdG9yLmdldERhdGEoKSwgZWRpdG9ySUQ6ICQoIFwiI3RpdHRsZVwiICkudmFsKCkgfSApO1xuXG4gICAgfSk7XG5cbn0pO1xuXG5cbmZ1bmN0aW9uIG9wZW5Jbk5ld1RhYih1cmwpIHtcbiAgICB2YXIgd2luID0gd2luZG93Lm9wZW4odXJsLCAnX2JsYW5rJyk7XG4gICAgd2luLmZvY3VzKCk7XG59XG5cbmZ1bmN0aW9uIGhhc2hDb2RlKHN0cikge1xuICAgIHZhciBoYXNoID0gMDtcbiAgICBpZiAoc3RyLmxlbmd0aCA9PSAwKSByZXR1cm4gaGFzaDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNoYXIgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgaGFzaCA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgY2hhcjtcbiAgICAgICAgaGFzaCA9IGhhc2ggJiBoYXNoOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcbiAgICB9XG4gICAgcmV0dXJuIGhhc2g7XG59XG5cblxuZnVuY3Rpb24gY29udmVydENvaW4odmFsdWUsIGNvaW4sIHRvY29pbikge1xuICAgIGNvbnNvbGUubG9nKCdjb252ZXJ0Q29pbicpXG5cbiAgICBsZXQgYWEgPSBcIjxzcGFuIGRhdGEtY29zdD0nXCIgKyB2YWx1ZSArIFwiJyBkYXRhLWNvaW49J1wiICsgY29pbiArIFwiJyBkYXRhLWNvaW4tY29udmVydD0nXCIgKyB0b2NvaW4gKyBcIicgY2xhc3M9J2Nvc3QnPlRvIGNvbnZlcnQgXCIgKyBjb2luICsgXCIgaW50byBcIiArIHRvY29pbiArIFwiIFwiICsgdmFsdWUgKyBcIjwvc3Bhbj5cIlxuICAgIC8vICQoJ3RkIHA6aGFzKHNwYW4uY29zdCknKS5hZGRDbGFzcygnbWlkZGxlJyk7XG4gICAgcmV0dXJuIGFhXG59XG5cblxuZnVuY3Rpb24gZG9Tb21ldGhpbmcoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJJdCBpcyBkb25lLlwiKTtcbiAgICAgICAgLy8gU3VjY2VlZCBoYWxmIG9mIHRoZSB0aW1lLlxuICAgICAgICBpZiAoTWF0aC5yYW5kb20oKSA+IC41KSB7XG4gICAgICAgICAgICByZXNvbHZlKFwiU1VDQ0VTU1wiKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KFwiRkFJTFVSRVwiKVxuICAgICAgICB9XG4gICAgfSlcbn1cblxuXG5cblxuZnVuY3Rpb24gZmFueWkodGV4dCwgbGFuZywgbGFuZ3RvKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coYEl0IGlzIGRvbmUuICR7dGV4dH0gJHtsYW5nfSAke2xhbmd0b31gKTtcbiAgICAgICAgLy8gU3VjY2VlZCBoYWxmIG9mIHRoZSB0aW1lLlxuICAgICAgICAvLyBsYW5nID0gJ3poJ1xuICAgICAgICAvLyBsYW5ndG8gPSAnZW4nXG4gICAgICAgIHZhciB1cmwgPSAnaHR0cDovL2k0ODcubHhjL2ZhbnlpJ1xuICAgICAgICB2YXIgaGVhZGVycyA9IHtcbiAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgICAgIH07XG4gICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgXCJmcm9tXCI6IGxhbmcsXG4gICAgICAgICAgICBcInRvXCI6IGxhbmd0byxcbiAgICAgICAgICAgIFwic3JjXCI6IHRleHQsXG4gICAgICAgICAgICBcImlcIjogJzEnXG4gICAgICAgIH07XG4gICAgICAgIGNvbnNvbGUubG9nKCd0aGlzIGlzIHRoZSB0ZXh0IHRvIHRyYW5zbGF0ZSAnICsgdGV4dClcblxuICAgICAgICB2YXIgZW5jb2RlX3BhcmFtcyA9ICQucGFyYW0oZGF0YSwgdHJ1ZSlcbiAgICAgICAgdmFyIHVybCA9IHVybCArICc/JyArIGVuY29kZV9wYXJhbXNcblxuICAgICAgICAkLmdldEpTT04odXJsLCBmdW5jdGlvbihkYXRhKSB7XG5cbiAgICAgICAgICAgIHJlc29sdmUoZGF0YSlcbiAgICAgICAgfSk7XG5cblxuICAgIH0pXG5cbn1cblxuXG5cblxuXG5cbmZ1bmN0aW9uIG1lc3NhZ2Uoc3RyKSB7XG5cbiAgICAkKFwiI3RleHRpbmZvXCIpLmh0bWwoc3RyKS5jc3MoeyBvcGFjaXR5OiAwLjk5IH0pO1xuICAgICQoXCIjdGV4dGluZm9cIikuYW5pbWF0ZSh7IG9wYWNpdHk6IDAgfSwgMTIwMCk7XG59XG5cbmZ1bmN0aW9uIGJhc2VuYW1lKHBhdGgsIHN1ZmZpeCkge1xuICAgIHZhciBiID0gcGF0aFxuICAgIHZhciBsYXN0Q2hhciA9IGIuY2hhckF0KGIubGVuZ3RoIC0gMSlcblxuICAgIGlmIChsYXN0Q2hhciA9PT0gJy8nIHx8IGxhc3RDaGFyID09PSAnXFxcXCcpIHtcbiAgICAgICAgYiA9IGIuc2xpY2UoMCwgLTEpXG4gICAgfVxuXG4gICAgYiA9IGIucmVwbGFjZSgvXi4qW1xcL1xcXFxdL2csICcnKVxuXG4gICAgaWYgKHR5cGVvZiBzdWZmaXggPT09ICdzdHJpbmcnICYmIGIuc3Vic3RyKGIubGVuZ3RoIC0gc3VmZml4Lmxlbmd0aCkgPT09IHN1ZmZpeCkge1xuICAgICAgICBiID0gYi5zdWJzdHIoMCwgYi5sZW5ndGggLSBzdWZmaXgubGVuZ3RoKVxuICAgIH1cblxuICAgIHJldHVybiBiXG59XG5cblxuZnVuY3Rpb24gZGlybmFtZShwYXRoKSB7XG4gICAgcmV0dXJuIHBhdGgucmVwbGFjZSgvXFxcXC9nLCAnLycpLnJlcGxhY2UoL1xcL1teXFwvXSpcXC8/JC8sICcnKVxufVxuXG5mdW5jdGlvbiBhZ3JlZ2F0ZXh0KHNlbGVjdG9yKSB7XG4gICAgdmFyIHRleHRzID0gJyc7XG5cbiAgICAkKFwiLmZpcnN0X2VkaXRvclwiKS5jaGlsZHJlbihzZWxlY3RvcikuZWFjaChmdW5jdGlvbigpIHtcblxuICAgICAgICAkKHRoaXMpLmNoaWxkcmVuKFwicFwiKS5lYWNoKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICB0ZXh0cyArPSAkKHRoaXMpLnRleHQoKSArIFwiXFxyXFxuXCI7XG5cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIGFsbExpc3RFbGVtZW50cyA9ICQoXCJsaSBiclwiKTtcblxuICAgICAgICAkKFwiLmZpcnN0X2VkaXRvclwiKS5maW5kKGFsbExpc3RFbGVtZW50cykuZWFjaChmdW5jdGlvbigpXG4gICAgICAgICAgICAvLyAkKHRoaXMpLm5leHRBbGwoXCJsaVwiKS5lYWNoKGZ1bmN0aW9uKClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0ZXh0cyArPSBcIiAgXCIgKyAkKHRoaXMpLmNvbnRlbnRzKCkuZ2V0KDApLm5vZGVWYWx1ZSArIFwiXFxyXFxuXCI7XG5cbiAgICAgICAgICAgIH0pO1xuXG5cblxuXG5cbiAgICB9KTtcblxuXG4gICAgcmV0dXJuIHRleHRzO1xufVxuXG5cblxuXG5cblxuZnVuY3Rpb24gc2F2ZShldnQsIGFjdGlvbikge1xuXG5cbiAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgICBjYXNlIFwic2F2ZVwiOiAvLyBlZGl0b3Igc2F2ZSBjb250ZW50XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImVkaXRvciBzYXZlIDJcIik7XG4gICAgICAgICAgICAkLnBvc3QoXCIvaW5jL3NhdmUucGhwXCIsIHsgYWN0aW9uOiBcInNhdmVcIiwgZGF0YTogZXZ0LmVkaXRvci5nZXREYXRhKCksIHBhdGg6IFwiL2RhdGEvcncxL20xXCIsIGZpbGU6ICQoXCIjdGl0dGxlXCIpLnZhbCgpIH0pO1xuICAgICAgICAgICAgLy8gIHRvIHByZXZlbnQgdGltZSBjb25zdW1pbmdcbiAgICAgICAgICAgIC8vICByZWFkKCk7XG4gICAgICAgICAgICBtZXNzYWdlKFwiZmlsZSBzYXZlZFwiKTtcblxuXG5cblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJzYXZldG9maWxlXCI6XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInNhdmUgdGV4dFwiKTtcbiAgICAgICAgICAgIHZhciBmaWxlID0gJChcIi5maXJzdF9lZGl0b3JcIikuY2hpbGRyZW4oXCIucGF0aFwiKS50ZXh0KCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhmaWxlKTtcbiAgICAgICAgICAgIG1lc3NhZ2UoXCJmaWxlIHNhdmVkIFwiICsgZmlsZSk7XG5cblxuICAgICAgICAgICAgLy8gdmFyIGZpbGUgPSBcIi9kYXRhL20zL21tLm1tXCI7XG4gICAgICAgICAgICB2YXIgcGF0aCA9IGRpcm5hbWUoZmlsZSk7XG4gICAgICAgICAgICB2YXIgZmlsZSA9IGJhc2VuYW1lKGZpbGUsICcnKTtcbiAgICAgICAgICAgIC8vIHZhciBkYXRhPScnO1xuICAgICAgICAgICAgLy8gJChcIiNzYXZldG9maWxlXCIpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyAgICBkYXRhID0gZGF0YSAgKyAgJCh0aGlzKS52YWwoKTtcbiAgICAgICAgICAgIC8vICAgIC8vY29kZVxuICAgICAgICAgICAgLy8gfSk7XG4gICAgICAgICAgICBkYXRhID0gYWdyZWdhdGV4dChcIi5zYXZldG9maWxlXCIpO1xuICAgICAgICAgICAgLy8gIGRhdGE9XCJ0ZXN0XCI7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHBhdGgpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coZmlsZSk7XG5cbiAgICAgICAgICAgICQucG9zdChcIi9pbmMvc2F2ZS5waHBcIiwgeyBhY3Rpb246IFwic2F2ZVwiLCBkYXRhOiBkYXRhLCBwYXRoOiBwYXRoLCBmaWxlOiBmaWxlIH0pO1xuXG5cbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHBhdGguYmFzZW5hbWUoc3RyLCAnLmh0bWwnKSk7XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuXG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic2F2ZSBkZWZhdWx0XCIpO1xuXG4gICAgfVxuXG5cblxuXG4gICAgLy8gIGNvbnNvbGUubG9nKFwiaGFzY29kZSBpcyBpczogXCIgKyBoYXNoQ29kZSgkKCBcIiNoaWRkZW5cIiApLnRleHQoKSkpO1xuICAgIC8vIGNvbnNvbGUubG9nIChcIjEgXCIgK2hhc2hDb2RlKCQoIFwiI2hpZGRlblwiICkudGV4dCgpKSk7XG4gICAgLy8gY29uc29sZS5sb2cgKFwiMiBcIiArJCggXCIjaGFzaFwiICkudGV4dCgpKTtcblxufVxuXG5cbmZ1bmN0aW9uIHJlYWQoKSB7XG5cblxuXG4gICAgJC5nZXQoJy9tMS8nICsgJChcIiN0aXR0bGVcIikudmFsKCksIHsgXCJfXCI6ICQubm93KCkgfSwgZnVuY3Rpb24oZGF0YTIpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJyZWFkaW5nIGZpbGUgXCIgKyAnL20xLycgKyAkKFwiI3RpdHRsZVwiKS52YWwoKSk7XG5cblxuICAgICAgICAvLyBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICAgICAgLy8gICQoJyNoaWRkZW4nKS5odG1sKGRhdGEyKTtcbiAgICAgICAgJCgnLmZpcnN0X2VkaXRvcicpLmh0bWwoZGF0YTIpO1xuXG4gICAgICAgIGhpZ2hsaWdodGpzd29ya2VycygpO1xuXG5cbiAgICAgICAgLy8gJCgnLmZpcnN0X2VkaXRvcicpLmh0bWwoZGF0YSk7XG5cbiAgICB9KS5kb25lKGZ1bmN0aW9uKCkge1xuXG5cbiAgICAgICAgLy8gaWYgKGhhc2hDb2RlKCQoIFwiI2hpZGRlblwiICkudGV4dCgpKSA9PSAkKCBcIiNoYXNoXCIgKS50ZXh0KCkgICApXG4gICAgICAgIC8vIG1lc3NhZ2UoXCJubyBtb2RpZmlhdGlvbnNcIik7XG4gICAgICAgIC8vIGVsc2Uge1xuICAgICAgICAvLyAgIG1lc3NhZ2UgKFwic2F2ZWQhXCIpXG4gICAgICAgIC8vICAgJCggXCIjaGFzaFwiICkuaHRtbChoYXNoQ29kZSgkKCBcIiNoaWRkZW5cIiApLnRleHQoKSkpO31cbiAgICAgICAgLy9cbiAgICB9KS5mYWlsKGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyQoJy5maXJzdF9lZGl0b3InKS5odG1sKFwiPGgxPmVycm9yIDQwNCBubyBmaWxlPC9oMT5cIik7IC8vIG9yIHdoYXRldmVyXG4gICAgfSwgJ3RleHQnKTtcblxufVxuXG5mdW5jdGlvbiBoaWdobGlnaHRqc3dvcmtlcnMoKSB7XG5cbiAgICAvLyBobGpzLmluaXRIaWdobGlnaHRpbmdPbkxvYWQoKTtcbiAgICAkKCdwcmUgY29kZScpLmVhY2goZnVuY3Rpb24oaSwgYmxvY2spIHtcbiAgICAgICAgaGxqcy5oaWdobGlnaHRCbG9jayhibG9jayk7XG4gICAgfSk7XG5cbiAgICAvLyAgdmFyIGNvZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdwcmUgY29kZScpO1xuICAgIC8vICB2YXIgd29ya2VyID0gbmV3IFdvcmtlcignL2pzL3dvcmtlci5qcycpO1xuICAgIC8vICBpZiAoIXdvcmtlci5vbm1lc3NhZ2UpIHsvL2F2b2lkIG51bGwgb2JqZWN0IGluIGNhc2UgZG9lc250IGV4aXN0c1xuICAgIC8vICB3b3JrZXIub25tZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHsgY29kZS5pbm5lckhUTUwgPSBldmVudC5kYXRhOyB9XG4gICAgLy8gLy8gd29ya2VyLnBvc3RNZXNzYWdlKGNvZGUudGV4dENvbnRlbnQpO1xuICAgIC8vIH1cbn07XG5cblxuLy9yZW5hbWUgZmlsZVxuZnVuY3Rpb24gcmVuYW1lKCkge1xuXG4gICAgY29uc29sZS5sb2coXCJjaGFuZ2UgdGhpcyBmaWxlOiBcIiArICQoXCIjdGl0dGxlXCIpLnZhbCgpICsgXCIgYnkgdGhpcyBmaWxlOiBcIiArICQoXCIjcmVuYW1lXCIpLnZhbCgpKTtcbiAgICAkLnBvc3QoXCIvaW5jL3NhdmUucGhwXCIsIHsgYWN0aW9uOiBcInJlbmFtZVwiLCBmaWxlOiAkKFwiI3RpdHRsZVwiKS52YWwoKSwgcGF0aDogXCIvZGF0YS9ydzEvbTFcIiwgZmlsZW91dDogJChcIiNyZW5hbWVcIikudmFsKCkgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkKFwiI3RpdHRsZVwiKS52YWwoJChcIiNyZW5hbWVcIikudmFsKCkpO1xuICAgICAgICB9KVxuICAgICAgICAuZG9uZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UoXCJmaWxlIHJlbmFtZWQgdG8gXCIgKyAkKFwiI3JlbmFtZVwiKS52YWwoKSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5mYWlsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgYWxlcnQoXCJlcnJvclwiKTtcbiAgICAgICAgfSk7XG5cbn07XG5cblxuLy9yZW5hbWUgZmlsZVxuZnVuY3Rpb24gdmVyc2lvbigpIHtcblxuICAgIGNvbnNvbGUubG9nKFwiY3JlYXRpbmcgYSBuZXcgdmVyc2lvbiBvZiB0aGlzOiBcIiArICQoXCIjdGl0dGxlXCIpLnZhbCgpKTtcblxuICAgICQucG9zdChcIi9pbmMvc2F2ZS5waHBcIiwgeyBhY3Rpb246IFwidmVyc2lvblwiLCBmaWxlOiAkKFwiI3RpdHRsZVwiKS52YWwoKSwgcGF0aDogXCIvZGF0YS9ydzEvbTFcIiwgZmlsZW91dDogJChcIiNyZW5hbWVcIikudmFsKCkgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkKFwiI3RpdHRsZVwiKS52YWwoJChcIiNyZW5hbWVcIikudmFsKCkpO1xuICAgICAgICB9KVxuICAgICAgICAuZG9uZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UoXCJOZXcgdmVyc2lvbiBiYWNrZWRcIik7XG4gICAgICAgIH0pXG4gICAgICAgIC5mYWlsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgYWxlcnQoXCJlcnJvclwiKTtcbiAgICAgICAgfSk7XG5cbn07XG5cblxuXG5cblxuXG5mdW5jdGlvbiBsb2FkYXV0b3NlYXJjaChzb3VyY2UpIHtcblxuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICB1cmw6IHNvdXJjZSxcbiAgICAgICAgZ2V0VmFsdWU6IFwiZmlsZW5hbWVcIixcbiAgICAgICAgLy8gbWluTGVuZ3RoOiAzLFxuICAgICAgICAvLyAgYXV0b0ZvY3VzOiB0cnVlLFxuICAgICAgICAvLyAgbXkgOiBcIjEwMCAxMDBcIixcbiAgICAgICAgLy8gIGF0OiBcImJvdHRvbVwiICxcbiAgICAgICAgLy8gIG9mOlwiI3RpdHRsZVwiLFxuXG4gICAgICAgIHRlbXBsYXRlOiB7XG4gICAgICAgICAgICB0eXBlOiBcImRlc2NyaXB0aW9uXCIsXG4gICAgICAgICAgICBmaWVsZHM6IHtcbiAgICAgICAgICAgICAgICAvLyBkZXNjcmlwdGlvbjogXCJlbWFpbFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGxpc3Q6IHtcbiAgICAgICAgICAgIG1hdGNoOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHRoZW1lOiBcInBsYXRlLWRhcmtcIlxuICAgIH07XG5cbiAgICAkKFwiI3RpdHRsZVwiKS5lYXN5QXV0b2NvbXBsZXRlKG9wdGlvbnMpO1xuXG59O1xuXG5cblxuXG5mdW5jdGlvbiBsb2FkVmlkZW8oZWxlbWVudCkge1xuXG4gICAgY29uc29sZS5sb2coJ2VsZW1lbnQgaXMgdmlkZW9saW5rJyk7XG4gICAgY29uc29sZS5sb2coZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKSk7XG4gICAgc3JjID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtcbiAgICAvLyAkKCd2aWRlby52aWRlb3JlYWQgc291cmNlJykuYXR0cignc3JjJywgc3JjKTtcbiAgICAkKCcjbXktcGxheWVyX2h0bWw1X2FwaScpLmF0dHIoJ3NyYycsIHNyYyk7XG4gICAgJCgnI215LXBsYXllcl9odG1sNV9hcGknKS5sb2FkKCk7XG4gICAgJCgnI215LXBsYXllcl9odG1sNV9hcGknKS5wbGF5KCk7XG4gICAgLy8gJChcInZpZGVvLnZpZGVvcmVhZFwiKVswXS5sb2FkKCk7XG4gICAgLy8gJChcInZpZGVvLnZpZGVvcmVhZFwiKVswXS5wbGF5KCk7XG4gICAgLy8gZXZ0LmRhdGEuZGlhbG9nID0gJ3RhYmxlUHJvcGVydGllcycgICA7XG5cbn1cblxuXG5cbmZ1bmN0aW9uIGdldFBhcmFtZXRlckJ5TmFtZShuYW1lLCB1cmwpIHtcbiAgICBpZiAoIXVybCkgdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvW1xcW1xcXV0vZywgXCJcXFxcJCZcIik7XG4gICAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cChcIls/Jl1cIiArIG5hbWUgKyBcIig9KFteJiNdKil8JnwjfCQpXCIpLFxuICAgICAgICByZXN1bHRzID0gcmVnZXguZXhlYyh1cmwpO1xuICAgIGlmICghcmVzdWx0cykgcmV0dXJuIG51bGw7XG4gICAgaWYgKCFyZXN1bHRzWzJdKSByZXR1cm4gJyc7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChyZXN1bHRzWzJdLnJlcGxhY2UoL1xcKy9nLCBcIiBcIikpO1xufVxuXG5cbmZ1bmN0aW9uIGluc2VydEJhaWR1bWFwKCkge1xuXG5cbiAgICB2YXIgbWFwID0gbmV3IEJNYXAuTWFwKFwiYWxsbWFwXCIpOyAvLyDliJvlu7pNYXDlrp7kvotcbiAgICBtYXAuY2VudGVyQW5kWm9vbShuZXcgQk1hcC5Qb2ludCgxMTYuNDA0LCAzOS45MTUpLCAxMSk7IC8vIOWIneWni+WMluWcsOWbvizorr7nva7kuK3lv4PngrnlnZDmoIflkozlnLDlm77nuqfliKtcbiAgICAvL+a3u+WKoOWcsOWbvuexu+Wei+aOp+S7tlxuICAgIG1hcC5hZGRDb250cm9sKG5ldyBCTWFwLk1hcFR5cGVDb250cm9sKHtcbiAgICAgICAgbWFwVHlwZXM6IFtcbiAgICAgICAgICAgIEJNQVBfTk9STUFMX01BUCxcbiAgICAgICAgICAgIEJNQVBfSFlCUklEX01BUFxuICAgICAgICBdXG4gICAgfSkpO1xuICAgIG1hcC5zZXRDdXJyZW50Q2l0eShcIuWMl+S6rFwiKTsgLy8g6K6+572u5Zyw5Zu+5pi+56S655qE5Z+O5biCIOatpOmhueaYr+W/hemhu+iuvue9rueahFxuICAgIG1hcC5lbmFibGVTY3JvbGxXaGVlbFpvb20odHJ1ZSk7IC8v5byA5ZCv6byg5qCH5rua6L2u57yp5pS+XG5cbn0iLCIvKiFcbiAqIG1vbmV5LmpzIC8gZngoKSB2MC4yXG4gKiBDb3B5cmlnaHQgMjAxNCBPcGVuIEV4Y2hhbmdlIFJhdGVzXG4gKlxuICogSmF2YVNjcmlwdCBsaWJyYXJ5IGZvciByZWFsdGltZSBjdXJyZW5jeSBjb252ZXJzaW9uIGFuZCBleGNoYW5nZSByYXRlIGNhbGN1bGF0aW9uLlxuICpcbiAqIEZyZWVseSBkaXN0cmlidXRhYmxlIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqIFBvcnRpb25zIG9mIG1vbmV5LmpzIGFyZSBpbnNwaXJlZCBieSBvciBib3Jyb3dlZCBmcm9tIHVuZGVyc2NvcmUuanNcbiAqXG4gKiBGb3IgZGV0YWlscywgZXhhbXBsZXMgYW5kIGRvY3VtZW50YXRpb246XG4gKiBodHRwOi8vb3BlbmV4Y2hhbmdlcmF0ZXMuZ2l0aHViLmlvL21vbmV5LmpzL1xuICovXG4oZnVuY3Rpb24ocm9vdCwgdW5kZWZpbmVkKSB7XG5cblx0Ly8gQ3JlYXRlIGEgc2FmZSByZWZlcmVuY2UgdG8gdGhlIG1vbmV5LmpzIG9iamVjdCBmb3IgdXNlIGJlbG93LlxuXHR2YXIgZnggPSBmdW5jdGlvbihvYmopIHtcblx0XHRyZXR1cm4gbmV3IGZ4V3JhcHBlcihvYmopO1xuXHR9O1xuXG5cdC8vIEN1cnJlbnQgdmVyc2lvbi5cblx0ZngudmVyc2lvbiA9ICcwLjInO1xuXG5cblx0LyogLS0tIFNldHVwIC0tLSAqL1xuXG5cdC8vIGZ4U2V0dXAgY2FuIGJlIGRlZmluZWQgYmVmb3JlIGxvYWRpbmcgbW9uZXkuanMsIHRvIHNldCB0aGUgZXhjaGFuZ2UgcmF0ZXMgYW5kIHRoZSBiYXNlXG5cdC8vIChhbmQgZGVmYXVsdCBmcm9tL3RvKSBjdXJyZW5jaWVzIC0gb3IgdGhlIHJhdGVzIGNhbiBiZSBsb2FkZWQgaW4gbGF0ZXIgaWYgbmVlZGVkLlxuXHR2YXIgZnhTZXR1cCA9IHJvb3QuZnhTZXR1cCB8fCB7XG5cdFx0cmF0ZXMgOiB7fSxcblx0XHRiYXNlIDogXCJcIlxuXHR9O1xuXG5cdC8vIE9iamVjdCBjb250YWluaW5nIGV4Y2hhbmdlIHJhdGVzIHJlbGF0aXZlIHRvIHRoZSBmeC5iYXNlIGN1cnJlbmN5LCBlZyB7IFwiR0JQXCIgOiBcIjAuNjRcIiB9XG5cdGZ4LnJhdGVzID0gZnhTZXR1cC5yYXRlcztcblxuXHQvLyBEZWZhdWx0IGV4Y2hhbmdlIHJhdGUgYmFzZSBjdXJyZW5jeSAoZWcgXCJVU0RcIiksIHdoaWNoIGFsbCB0aGUgZXhjaGFuZ2UgcmF0ZXMgYXJlIHJlbGF0aXZlIHRvXG5cdGZ4LmJhc2UgPSBmeFNldHVwLmJhc2U7XG5cblx0Ly8gRGVmYXVsdCBmcm9tIC8gdG8gY3VycmVuY2llcyBmb3IgY29udmVyc2lvbiB2aWEgZnguY29udmVydCgpOlxuXHRmeC5zZXR0aW5ncyA9IHtcblx0XHRmcm9tIDogZnhTZXR1cC5mcm9tIHx8IGZ4LmJhc2UsXG5cdFx0dG8gOiBmeFNldHVwLnRvIHx8IGZ4LmJhc2Vcblx0fTtcblxuXG5cdC8qIC0tLSBDb252ZXJzaW9uIC0tLSAqL1xuXG5cdC8vIFRoZSBiYXNlIGZ1bmN0aW9uIG9mIHRoZSBsaWJyYXJ5OiBjb252ZXJ0cyBhIHZhbHVlIGZyb20gb25lIGN1cnJlbmN5IHRvIGFub3RoZXJcblx0dmFyIGNvbnZlcnQgPSBmeC5jb252ZXJ0ID0gZnVuY3Rpb24odmFsLCBvcHRzKSB7XG5cdFx0Ly8gQ29udmVydCBhcnJheXMgcmVjdXJzaXZlbHlcblx0XHRpZiAodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgJiYgdmFsLmxlbmd0aCkge1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGk8IHZhbC5sZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0dmFsW2ldID0gY29udmVydCh2YWxbaV0sIG9wdHMpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgd2UgZ290cyBzb21lIG9wdHNcblx0XHRvcHRzID0gb3B0cyB8fCB7fTtcblxuXHRcdC8vIFdlIG5lZWQgdG8ga25vdyB0aGUgYGZyb21gIGFuZCBgdG9gIGN1cnJlbmNpZXNcblx0XHRpZiggIW9wdHMuZnJvbSApIG9wdHMuZnJvbSA9IGZ4LnNldHRpbmdzLmZyb207XG5cdFx0aWYoICFvcHRzLnRvICkgb3B0cy50byA9IGZ4LnNldHRpbmdzLnRvO1xuXG5cdFx0Ly8gTXVsdGlwbGUgdGhlIHZhbHVlIGJ5IHRoZSBleGNoYW5nZSByYXRlXG5cdFx0cmV0dXJuIHZhbCAqIGdldFJhdGUoIG9wdHMudG8sIG9wdHMuZnJvbSApO1xuXHR9O1xuXG5cdC8vIFJldHVybnMgdGhlIGV4Y2hhbmdlIHJhdGUgdG8gYHRhcmdldGAgY3VycmVuY3kgZnJvbSBgYmFzZWAgY3VycmVuY3lcblx0dmFyIGdldFJhdGUgPSBmdW5jdGlvbih0bywgZnJvbSkge1xuXHRcdC8vIFNhdmUgYnl0ZXMgaW4gbWluaWZpZWQgdmVyc2lvblxuXHRcdHZhciByYXRlcyA9IGZ4LnJhdGVzO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoZSBiYXNlIHJhdGUgaXMgaW4gdGhlIHJhdGVzIG9iamVjdDpcblx0XHRyYXRlc1tmeC5iYXNlXSA9IDE7XG5cblx0XHQvLyBUaHJvdyBhbiBlcnJvciBpZiBlaXRoZXIgcmF0ZSBpc24ndCBpbiB0aGUgcmF0ZXMgYXJyYXlcblx0XHRpZiAoICFyYXRlc1t0b10gfHwgIXJhdGVzW2Zyb21dICkgdGhyb3cgXCJmeCBlcnJvclwiO1xuXG5cdFx0Ly8gSWYgYGZyb21gIGN1cnJlbmN5ID09PSBmeC5iYXNlLCByZXR1cm4gdGhlIGJhc2ljIGV4Y2hhbmdlIHJhdGUgZm9yIHRoZSBgdG9gIGN1cnJlbmN5XG5cdFx0aWYgKCBmcm9tID09PSBmeC5iYXNlICkge1xuXHRcdFx0cmV0dXJuIHJhdGVzW3RvXTtcblx0XHR9XG5cblx0XHQvLyBJZiBgdG9gIGN1cnJlbmN5ID09PSBmeC5iYXNlLCByZXR1cm4gdGhlIGJhc2ljIGludmVyc2UgcmF0ZSBvZiB0aGUgYGZyb21gIGN1cnJlbmN5XG5cdFx0aWYgKCB0byA9PT0gZnguYmFzZSApIHtcblx0XHRcdHJldHVybiAxIC8gcmF0ZXNbZnJvbV07XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlLCByZXR1cm4gdGhlIGB0b2AgcmF0ZSBtdWx0aXBsZWQgYnkgdGhlIGludmVyc2Ugb2YgdGhlIGBmcm9tYCByYXRlIHRvIGdldCB0aGVcblx0XHQvLyByZWxhdGl2ZSBleGNoYW5nZSByYXRlIGJldHdlZW4gdGhlIHR3byBjdXJyZW5jaWVzXG5cdFx0cmV0dXJuIHJhdGVzW3RvXSAqICgxIC8gcmF0ZXNbZnJvbV0pO1xuXHR9O1xuXG5cblx0LyogLS0tIE9PUCB3cmFwcGVyIGFuZCBjaGFpbmluZyAtLS0gKi9cblxuXHQvLyBJZiBmeCh2YWwpIGlzIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLCBpdCByZXR1cm5zIGEgd3JhcHBlZCBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBPTy1zdHlsZVxuXHR2YXIgZnhXcmFwcGVyID0gZnVuY3Rpb24odmFsKSB7XG5cdFx0Ly8gRXhwZXJpbWVudGFsOiBwYXJzZSBzdHJpbmdzIHRvIHB1bGwgb3V0IGN1cnJlbmN5IGNvZGUgYW5kIHZhbHVlOlxuXHRcdGlmICggdHlwZW9mXHR2YWwgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0aGlzLl92ID0gcGFyc2VGbG9hdCh2YWwucmVwbGFjZSgvW14wLTktLl0vZywgXCJcIikpO1xuXHRcdFx0dGhpcy5fZnggPSB2YWwucmVwbGFjZSgvKFteQS1aYS16XSkvZywgXCJcIik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuX3YgPSB2YWw7XG5cdFx0fVxuXHR9O1xuXG5cdC8vIEV4cG9zZSBgd3JhcHBlci5wcm90b3R5cGVgIGFzIGBmeC5wcm90b3R5cGVgXG5cdHZhciBmeFByb3RvID0gZngucHJvdG90eXBlID0gZnhXcmFwcGVyLnByb3RvdHlwZTtcblxuXHQvLyBmeCh2YWwpLmNvbnZlcnQob3B0cykgZG9lcyB0aGUgc2FtZSB0aGluZyBhcyBmeC5jb252ZXJ0KHZhbCwgb3B0cylcblx0ZnhQcm90by5jb252ZXJ0ID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXHRcdGFyZ3MudW5zaGlmdCh0aGlzLl92KTtcblx0XHRyZXR1cm4gY29udmVydC5hcHBseShmeCwgYXJncyk7XG5cdH07XG5cblx0Ly8gZngodmFsKS5mcm9tKGN1cnJlbmN5KSByZXR1cm5zIGEgd3JhcHBlZCBgZnhgIHdoZXJlIHRoZSB2YWx1ZSBoYXMgYmVlbiBjb252ZXJ0ZWQgZnJvbVxuXHQvLyBgY3VycmVuY3lgIHRvIHRoZSBgZnguYmFzZWAgY3VycmVuY3kuIFNob3VsZCBiZSBmb2xsb3dlZCBieSBgLnRvKG90aGVyQ3VycmVuY3kpYFxuXHRmeFByb3RvLmZyb20gPSBmdW5jdGlvbihjdXJyZW5jeSkge1xuXHRcdHZhciB3cmFwcGVkID0gZngoY29udmVydCh0aGlzLl92LCB7ZnJvbTogY3VycmVuY3ksIHRvOiBmeC5iYXNlfSkpO1xuXHRcdHdyYXBwZWQuX2Z4ID0gZnguYmFzZTtcblx0XHRyZXR1cm4gd3JhcHBlZDtcblx0fTtcblxuXHQvLyBmeCh2YWwpLnRvKGN1cnJlbmN5KSByZXR1cm5zIHRoZSB2YWx1ZSwgY29udmVydGVkIGZyb20gYGZ4LmJhc2VgIHRvIGBjdXJyZW5jeWBcblx0ZnhQcm90by50byA9IGZ1bmN0aW9uKGN1cnJlbmN5KSB7XG5cdFx0cmV0dXJuIGNvbnZlcnQodGhpcy5fdiwge2Zyb206IHRoaXMuX2Z4ID8gdGhpcy5fZnggOiBmeC5zZXR0aW5ncy5mcm9tLCB0bzogY3VycmVuY3l9KTtcblx0fTtcblxuXG5cdC8qIC0tLSBNb2R1bGUgRGVmaW5pdGlvbiAtLS0gKi9cblxuXHQvLyBFeHBvcnQgdGhlIGZ4IG9iamVjdCBmb3IgQ29tbW9uSlMuIElmIGJlaW5nIGxvYWRlZCBhcyBhbiBBTUQgbW9kdWxlLCBkZWZpbmUgaXQgYXMgc3VjaC5cblx0Ly8gT3RoZXJ3aXNlLCBqdXN0IGFkZCBgZnhgIHRvIHRoZSBnbG9iYWwgb2JqZWN0XG5cdGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRcdGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ4O1xuXHRcdH1cblx0XHRleHBvcnRzLmZ4ID0gZng7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0Ly8gUmV0dXJuIHRoZSBsaWJyYXJ5IGFzIGFuIEFNRCBtb2R1bGU6XG5cdFx0ZGVmaW5lKFtdLCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBmeDtcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHQvLyBVc2UgZngubm9Db25mbGljdCB0byByZXN0b3JlIGBmeGAgYmFjayB0byBpdHMgb3JpZ2luYWwgdmFsdWUgYmVmb3JlIG1vbmV5LmpzIGxvYWRlZC5cblx0XHQvLyBSZXR1cm5zIGEgcmVmZXJlbmNlIHRvIHRoZSBsaWJyYXJ5J3MgYGZ4YCBvYmplY3Q7IGUuZy4gYHZhciBtb25leSA9IGZ4Lm5vQ29uZmxpY3QoKTtgXG5cdFx0Zngubm9Db25mbGljdCA9IChmdW5jdGlvbihwcmV2aW91c0Z4KSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdC8vIFJlc2V0IHRoZSB2YWx1ZSBvZiB0aGUgcm9vdCdzIGBmeGAgdmFyaWFibGU6XG5cdFx0XHRcdHJvb3QuZnggPSBwcmV2aW91c0Z4O1xuXHRcdFx0XHQvLyBEZWxldGUgdGhlIG5vQ29uZmxpY3QgZnVuY3Rpb246XG5cdFx0XHRcdGZ4Lm5vQ29uZmxpY3QgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdC8vIFJldHVybiByZWZlcmVuY2UgdG8gdGhlIGxpYnJhcnkgdG8gcmUtYXNzaWduIGl0OlxuXHRcdFx0XHRyZXR1cm4gZng7XG5cdFx0XHR9O1xuXHRcdH0pKHJvb3QuZngpO1xuXG5cdFx0Ly8gRGVjbGFyZSBgZnhgIG9uIHRoZSByb290IChnbG9iYWwvd2luZG93KSBvYmplY3Q6XG5cdFx0cm9vdFsnZngnXSA9IGZ4O1xuXHR9XG5cblx0Ly8gUm9vdCB3aWxsIGJlIGB3aW5kb3dgIGluIGJyb3dzZXIgb3IgYGdsb2JhbGAgb24gdGhlIHNlcnZlcjpcbn0odGhpcykpO1xuIl19"}